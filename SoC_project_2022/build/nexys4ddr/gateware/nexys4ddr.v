// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : nexys4ddr.v
// Device     : xc7a100t-CSG324-1
// LiteX sha1 : 2a172148
// Date       : 2022-06-25 19:17:03
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module nexys4ddr (
	output reg  serial_tx,
	input  wire serial_rx,
	input  wire clk,
	input  wire cpu_reset,
	output wire led0,
	output wire led1,
	output wire led2,
	output wire led3,
	output wire led4,
	output wire led5,
	output wire led6,
	output wire led7,
	output wire led8,
	output wire led9,
	input  wire sw0,
	input  wire sw1,
	input  wire sw2,
	input  wire sw3,
	input  wire sw4,
	input  wire sw5,
	input  wire sw6,
	input  wire sw7,
	input  wire btnc,
	input  wire btnr,
	input  wire btnl,
	output wire display_segment0,
	output wire display_segment1,
	output wire display_segment2,
	output wire display_segment3,
	output wire display_segment4,
	output wire display_segment5,
	output wire display_segment6,
	output wire display_segment7,
	output wire display_digit0,
	output wire display_digit1,
	output wire display_digit2,
	output wire display_digit3,
	output wire display_digit4,
	output wire display_digit5,
	output wire display_digit6,
	output wire display_digit7,
	output reg  ledRGB1_r,
	output reg  ledRGB1_g,
	output reg  ledRGB1_b,
	output reg  ledRGB2_r,
	output reg  ledRGB2_g,
	output reg  ledRGB2_b,
	output reg  uart_wifi_tx,
	input  wire uart_wifi_rx,
	output wire pwm
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  basesoc_basesoc_soc_rst = 1'd0;
wire basesoc_basesoc_cpu_rst;
reg  [1:0] basesoc_basesoc_reset_storage = 2'd0;
reg  basesoc_basesoc_reset_re = 1'd0;
reg  [31:0] basesoc_basesoc_scratch_storage = 32'd305419896;
reg  basesoc_basesoc_scratch_re = 1'd0;
wire [31:0] basesoc_basesoc_bus_errors_status;
wire basesoc_basesoc_bus_errors_we;
reg  basesoc_basesoc_bus_errors_re = 1'd0;
wire basesoc_basesoc_bus_error;
reg  [31:0] basesoc_basesoc_bus_errors = 32'd0;
wire basesoc_basesoc_reset;
reg  [31:0] basesoc_basesoc_interrupt = 32'd0;
wire [29:0] basesoc_basesoc_ibus_adr;
wire [31:0] basesoc_basesoc_ibus_dat_w;
wire [31:0] basesoc_basesoc_ibus_dat_r;
wire [3:0] basesoc_basesoc_ibus_sel;
wire basesoc_basesoc_ibus_cyc;
wire basesoc_basesoc_ibus_stb;
wire basesoc_basesoc_ibus_ack;
wire basesoc_basesoc_ibus_we;
wire [2:0] basesoc_basesoc_ibus_cti;
wire [1:0] basesoc_basesoc_ibus_bte;
wire basesoc_basesoc_ibus_err;
wire [29:0] basesoc_basesoc_dbus_adr;
wire [31:0] basesoc_basesoc_dbus_dat_w;
wire [31:0] basesoc_basesoc_dbus_dat_r;
wire [3:0] basesoc_basesoc_dbus_sel;
wire basesoc_basesoc_dbus_cyc;
wire basesoc_basesoc_dbus_stb;
wire basesoc_basesoc_dbus_ack;
wire basesoc_basesoc_dbus_we;
wire [2:0] basesoc_basesoc_dbus_cti;
wire [1:0] basesoc_basesoc_dbus_bte;
wire basesoc_basesoc_dbus_err;
reg  [31:0] basesoc_basesoc_vexriscv = 32'd0;
wire [29:0] basesoc_basesoc_ram_bus_adr;
wire [31:0] basesoc_basesoc_ram_bus_dat_w;
wire [31:0] basesoc_basesoc_ram_bus_dat_r;
wire [3:0] basesoc_basesoc_ram_bus_sel;
wire basesoc_basesoc_ram_bus_cyc;
wire basesoc_basesoc_ram_bus_stb;
reg  basesoc_basesoc_ram_bus_ack = 1'd0;
wire basesoc_basesoc_ram_bus_we;
wire [2:0] basesoc_basesoc_ram_bus_cti;
wire [1:0] basesoc_basesoc_ram_bus_bte;
reg  basesoc_basesoc_ram_bus_err = 1'd0;
wire [12:0] basesoc_basesoc_adr;
wire [31:0] basesoc_basesoc_dat_r;
wire [29:0] basesoc_basesoc_interface0_ram_bus_adr;
wire [31:0] basesoc_basesoc_interface0_ram_bus_dat_w;
wire [31:0] basesoc_basesoc_interface0_ram_bus_dat_r;
wire [3:0] basesoc_basesoc_interface0_ram_bus_sel;
wire basesoc_basesoc_interface0_ram_bus_cyc;
wire basesoc_basesoc_interface0_ram_bus_stb;
reg  basesoc_basesoc_interface0_ram_bus_ack = 1'd0;
wire basesoc_basesoc_interface0_ram_bus_we;
wire [2:0] basesoc_basesoc_interface0_ram_bus_cti;
wire [1:0] basesoc_basesoc_interface0_ram_bus_bte;
reg  basesoc_basesoc_interface0_ram_bus_err = 1'd0;
wire [10:0] basesoc_basesoc_sram0_adr;
wire [31:0] basesoc_basesoc_sram0_dat_r;
reg  [3:0] basesoc_basesoc_sram0_we = 4'd0;
wire [31:0] basesoc_basesoc_sram0_dat_w;
wire [29:0] basesoc_basesoc_interface1_ram_bus_adr;
wire [31:0] basesoc_basesoc_interface1_ram_bus_dat_w;
wire [31:0] basesoc_basesoc_interface1_ram_bus_dat_r;
wire [3:0] basesoc_basesoc_interface1_ram_bus_sel;
wire basesoc_basesoc_interface1_ram_bus_cyc;
wire basesoc_basesoc_interface1_ram_bus_stb;
reg  basesoc_basesoc_interface1_ram_bus_ack = 1'd0;
wire basesoc_basesoc_interface1_ram_bus_we;
wire [2:0] basesoc_basesoc_interface1_ram_bus_cti;
wire [1:0] basesoc_basesoc_interface1_ram_bus_bte;
reg  basesoc_basesoc_interface1_ram_bus_err = 1'd0;
wire [11:0] basesoc_basesoc_sram1_adr;
wire [31:0] basesoc_basesoc_sram1_dat_r;
reg  [3:0] basesoc_basesoc_sram1_we = 4'd0;
wire [31:0] basesoc_basesoc_sram1_dat_w;
wire basesoc_basesoc_tx_sink_valid;
reg  basesoc_basesoc_tx_sink_ready = 1'd0;
wire basesoc_basesoc_tx_sink_first;
wire basesoc_basesoc_tx_sink_last;
wire [7:0] basesoc_basesoc_tx_sink_payload_data;
reg  [7:0] basesoc_basesoc_tx_data = 8'd0;
reg  [3:0] basesoc_basesoc_tx_count = 4'd0;
reg  basesoc_basesoc_tx_enable = 1'd0;
reg  basesoc_basesoc_tx_tick = 1'd0;
reg  [31:0] basesoc_basesoc_tx_phase = 32'd0;
reg  basesoc_basesoc_rx_source_valid = 1'd0;
wire basesoc_basesoc_rx_source_ready;
reg  basesoc_basesoc_rx_source_first = 1'd0;
reg  basesoc_basesoc_rx_source_last = 1'd0;
reg  [7:0] basesoc_basesoc_rx_source_payload_data = 8'd0;
reg  [7:0] basesoc_basesoc_rx_data = 8'd0;
reg  [3:0] basesoc_basesoc_rx_count = 4'd0;
reg  basesoc_basesoc_rx_enable = 1'd0;
reg  basesoc_basesoc_rx_tick = 1'd0;
reg  [31:0] basesoc_basesoc_rx_phase = 32'd0;
wire basesoc_basesoc_rx_rx;
reg  basesoc_basesoc_rx_rx_d = 1'd0;
reg  basesoc_basesoc_uart_rxtx_re = 1'd0;
wire [7:0] basesoc_basesoc_uart_rxtx_r;
reg  basesoc_basesoc_uart_rxtx_we = 1'd0;
wire [7:0] basesoc_basesoc_uart_rxtx_w;
wire basesoc_basesoc_uart_txfull_status;
wire basesoc_basesoc_uart_txfull_we;
reg  basesoc_basesoc_uart_txfull_re = 1'd0;
wire basesoc_basesoc_uart_rxempty_status;
wire basesoc_basesoc_uart_rxempty_we;
reg  basesoc_basesoc_uart_rxempty_re = 1'd0;
wire basesoc_basesoc_uart_irq;
wire basesoc_basesoc_uart_tx_status;
reg  basesoc_basesoc_uart_tx_pending = 1'd0;
wire basesoc_basesoc_uart_tx_trigger;
reg  basesoc_basesoc_uart_tx_clear = 1'd0;
reg  basesoc_basesoc_uart_tx_trigger_d = 1'd0;
wire basesoc_basesoc_uart_rx_status;
reg  basesoc_basesoc_uart_rx_pending = 1'd0;
wire basesoc_basesoc_uart_rx_trigger;
reg  basesoc_basesoc_uart_rx_clear = 1'd0;
reg  basesoc_basesoc_uart_rx_trigger_d = 1'd0;
wire basesoc_basesoc_uart_tx0;
wire basesoc_basesoc_uart_rx0;
reg  [1:0] basesoc_basesoc_uart_status_status = 2'd0;
wire basesoc_basesoc_uart_status_we;
reg  basesoc_basesoc_uart_status_re = 1'd0;
wire basesoc_basesoc_uart_tx1;
wire basesoc_basesoc_uart_rx1;
reg  [1:0] basesoc_basesoc_uart_pending_status = 2'd0;
wire basesoc_basesoc_uart_pending_we;
reg  basesoc_basesoc_uart_pending_re = 1'd0;
reg  [1:0] basesoc_basesoc_uart_pending_r = 2'd0;
wire basesoc_basesoc_uart_tx2;
wire basesoc_basesoc_uart_rx2;
reg  [1:0] basesoc_basesoc_uart_enable_storage = 2'd0;
reg  basesoc_basesoc_uart_enable_re = 1'd0;
wire basesoc_basesoc_uart_txempty_status;
wire basesoc_basesoc_uart_txempty_we;
reg  basesoc_basesoc_uart_txempty_re = 1'd0;
wire basesoc_basesoc_uart_rxfull_status;
wire basesoc_basesoc_uart_rxfull_we;
reg  basesoc_basesoc_uart_rxfull_re = 1'd0;
wire basesoc_basesoc_uart_uart_sink_valid;
wire basesoc_basesoc_uart_uart_sink_ready;
wire basesoc_basesoc_uart_uart_sink_first;
wire basesoc_basesoc_uart_uart_sink_last;
wire [7:0] basesoc_basesoc_uart_uart_sink_payload_data;
wire basesoc_basesoc_uart_uart_source_valid;
wire basesoc_basesoc_uart_uart_source_ready;
wire basesoc_basesoc_uart_uart_source_first;
wire basesoc_basesoc_uart_uart_source_last;
wire [7:0] basesoc_basesoc_uart_uart_source_payload_data;
wire basesoc_basesoc_uart_tx_fifo_sink_valid;
wire basesoc_basesoc_uart_tx_fifo_sink_ready;
reg  basesoc_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg  basesoc_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] basesoc_basesoc_uart_tx_fifo_sink_payload_data;
wire basesoc_basesoc_uart_tx_fifo_source_valid;
wire basesoc_basesoc_uart_tx_fifo_source_ready;
wire basesoc_basesoc_uart_tx_fifo_source_first;
wire basesoc_basesoc_uart_tx_fifo_source_last;
wire [7:0] basesoc_basesoc_uart_tx_fifo_source_payload_data;
wire basesoc_basesoc_uart_tx_fifo_re;
reg  basesoc_basesoc_uart_tx_fifo_readable = 1'd0;
wire basesoc_basesoc_uart_tx_fifo_syncfifo_we;
wire basesoc_basesoc_uart_tx_fifo_syncfifo_writable;
wire basesoc_basesoc_uart_tx_fifo_syncfifo_re;
wire basesoc_basesoc_uart_tx_fifo_syncfifo_readable;
wire [9:0] basesoc_basesoc_uart_tx_fifo_syncfifo_din;
wire [9:0] basesoc_basesoc_uart_tx_fifo_syncfifo_dout;
reg  [4:0] basesoc_basesoc_uart_tx_fifo_level0 = 5'd0;
reg  basesoc_basesoc_uart_tx_fifo_replace = 1'd0;
reg  [3:0] basesoc_basesoc_uart_tx_fifo_produce = 4'd0;
reg  [3:0] basesoc_basesoc_uart_tx_fifo_consume = 4'd0;
reg  [3:0] basesoc_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] basesoc_basesoc_uart_tx_fifo_wrport_dat_r;
wire basesoc_basesoc_uart_tx_fifo_wrport_we;
wire [9:0] basesoc_basesoc_uart_tx_fifo_wrport_dat_w;
wire basesoc_basesoc_uart_tx_fifo_do_read;
wire [3:0] basesoc_basesoc_uart_tx_fifo_rdport_adr;
wire [9:0] basesoc_basesoc_uart_tx_fifo_rdport_dat_r;
wire basesoc_basesoc_uart_tx_fifo_rdport_re;
wire [4:0] basesoc_basesoc_uart_tx_fifo_level1;
wire [7:0] basesoc_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire basesoc_basesoc_uart_tx_fifo_fifo_in_first;
wire basesoc_basesoc_uart_tx_fifo_fifo_in_last;
wire [7:0] basesoc_basesoc_uart_tx_fifo_fifo_out_payload_data;
wire basesoc_basesoc_uart_tx_fifo_fifo_out_first;
wire basesoc_basesoc_uart_tx_fifo_fifo_out_last;
wire basesoc_basesoc_uart_rx_fifo_sink_valid;
wire basesoc_basesoc_uart_rx_fifo_sink_ready;
wire basesoc_basesoc_uart_rx_fifo_sink_first;
wire basesoc_basesoc_uart_rx_fifo_sink_last;
wire [7:0] basesoc_basesoc_uart_rx_fifo_sink_payload_data;
wire basesoc_basesoc_uart_rx_fifo_source_valid;
wire basesoc_basesoc_uart_rx_fifo_source_ready;
wire basesoc_basesoc_uart_rx_fifo_source_first;
wire basesoc_basesoc_uart_rx_fifo_source_last;
wire [7:0] basesoc_basesoc_uart_rx_fifo_source_payload_data;
wire basesoc_basesoc_uart_rx_fifo_re;
reg  basesoc_basesoc_uart_rx_fifo_readable = 1'd0;
wire basesoc_basesoc_uart_rx_fifo_syncfifo_we;
wire basesoc_basesoc_uart_rx_fifo_syncfifo_writable;
wire basesoc_basesoc_uart_rx_fifo_syncfifo_re;
wire basesoc_basesoc_uart_rx_fifo_syncfifo_readable;
wire [9:0] basesoc_basesoc_uart_rx_fifo_syncfifo_din;
wire [9:0] basesoc_basesoc_uart_rx_fifo_syncfifo_dout;
reg  [4:0] basesoc_basesoc_uart_rx_fifo_level0 = 5'd0;
reg  basesoc_basesoc_uart_rx_fifo_replace = 1'd0;
reg  [3:0] basesoc_basesoc_uart_rx_fifo_produce = 4'd0;
reg  [3:0] basesoc_basesoc_uart_rx_fifo_consume = 4'd0;
reg  [3:0] basesoc_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] basesoc_basesoc_uart_rx_fifo_wrport_dat_r;
wire basesoc_basesoc_uart_rx_fifo_wrport_we;
wire [9:0] basesoc_basesoc_uart_rx_fifo_wrport_dat_w;
wire basesoc_basesoc_uart_rx_fifo_do_read;
wire [3:0] basesoc_basesoc_uart_rx_fifo_rdport_adr;
wire [9:0] basesoc_basesoc_uart_rx_fifo_rdport_dat_r;
wire basesoc_basesoc_uart_rx_fifo_rdport_re;
wire [4:0] basesoc_basesoc_uart_rx_fifo_level1;
wire [7:0] basesoc_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire basesoc_basesoc_uart_rx_fifo_fifo_in_first;
wire basesoc_basesoc_uart_rx_fifo_fifo_in_last;
wire [7:0] basesoc_basesoc_uart_rx_fifo_fifo_out_payload_data;
wire basesoc_basesoc_uart_rx_fifo_fifo_out_first;
wire basesoc_basesoc_uart_rx_fifo_fifo_out_last;
reg  [31:0] basesoc_basesoc_timer_load_storage = 32'd0;
reg  basesoc_basesoc_timer_load_re = 1'd0;
reg  [31:0] basesoc_basesoc_timer_reload_storage = 32'd0;
reg  basesoc_basesoc_timer_reload_re = 1'd0;
reg  basesoc_basesoc_timer_en_storage = 1'd0;
reg  basesoc_basesoc_timer_en_re = 1'd0;
reg  basesoc_basesoc_timer_update_value_storage = 1'd0;
reg  basesoc_basesoc_timer_update_value_re = 1'd0;
reg  [31:0] basesoc_basesoc_timer_value_status = 32'd0;
wire basesoc_basesoc_timer_value_we;
reg  basesoc_basesoc_timer_value_re = 1'd0;
wire basesoc_basesoc_timer_irq;
wire basesoc_basesoc_timer_zero_status;
reg  basesoc_basesoc_timer_zero_pending = 1'd0;
wire basesoc_basesoc_timer_zero_trigger;
reg  basesoc_basesoc_timer_zero_clear = 1'd0;
reg  basesoc_basesoc_timer_zero_trigger_d = 1'd0;
wire basesoc_basesoc_timer_zero0;
wire basesoc_basesoc_timer_status_status;
wire basesoc_basesoc_timer_status_we;
reg  basesoc_basesoc_timer_status_re = 1'd0;
wire basesoc_basesoc_timer_zero1;
wire basesoc_basesoc_timer_pending_status;
wire basesoc_basesoc_timer_pending_we;
reg  basesoc_basesoc_timer_pending_re = 1'd0;
reg  basesoc_basesoc_timer_pending_r = 1'd0;
wire basesoc_basesoc_timer_zero2;
reg  basesoc_basesoc_timer_enable_storage = 1'd0;
reg  basesoc_basesoc_timer_enable_re = 1'd0;
reg  [31:0] basesoc_basesoc_timer_value = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg  basesoc_int_rst = 1'd1;
reg  [9:0] basesoc_leds_storage = 10'd0;
reg  basesoc_leds_re = 1'd0;
wire [7:0] basesoc_switchs_status;
wire basesoc_switchs_we;
reg  basesoc_switchs_re = 1'd0;
wire [2:0] basesoc_buttons_status;
wire basesoc_buttons_we;
reg  basesoc_buttons_re = 1'd0;
reg  [2:0] basesoc_dgt_count = 3'd0;
reg  basesoc_dgt_tick = 1'd0;
reg  [17:0] basesoc_dgt_tick_count = 18'd0;
wire [7:0] basesoc_displays0;
wire [7:0] basesoc_displays1;
wire [7:0] basesoc_displays2;
wire [7:0] basesoc_displays3;
wire [7:0] basesoc_displays4;
wire [7:0] basesoc_displays5;
wire [7:0] basesoc_displays6;
wire [7:0] basesoc_displays7;
reg  [7:0] basesoc_dig_0_storage = 8'd0;
reg  basesoc_dig_0_re = 1'd0;
reg  [7:0] basesoc_dig_1_storage = 8'd0;
reg  basesoc_dig_1_re = 1'd0;
reg  [7:0] basesoc_dig_2_storage = 8'd0;
reg  basesoc_dig_2_re = 1'd0;
reg  [7:0] basesoc_dig_3_storage = 8'd0;
reg  basesoc_dig_3_re = 1'd0;
reg  [7:0] basesoc_dig_4_storage = 8'd0;
reg  basesoc_dig_4_re = 1'd0;
reg  [7:0] basesoc_dig_5_storage = 8'd0;
reg  basesoc_dig_5_re = 1'd0;
reg  [7:0] basesoc_dig_6_storage = 8'd0;
reg  basesoc_dig_6_re = 1'd0;
reg  [7:0] basesoc_dig_7_storage = 8'd0;
reg  basesoc_dig_7_re = 1'd0;
wire basesoc_ledRGB_1_r_enable;
wire [31:0] basesoc_ledRGB_1_r_width;
wire [31:0] basesoc_ledRGB_1_r_period;
reg  [31:0] basesoc_ledRGB_1_r_counter = 32'd0;
reg  basesoc_ledRGB_1_r_enable_storage = 1'd0;
reg  basesoc_ledRGB_1_r_enable_re = 1'd0;
reg  [31:0] basesoc_ledRGB_1_r_width_storage = 32'd0;
reg  basesoc_ledRGB_1_r_width_re = 1'd0;
reg  [31:0] basesoc_ledRGB_1_r_period_storage = 32'd0;
reg  basesoc_ledRGB_1_r_period_re = 1'd0;
wire basesoc_ledRGB_1_g_enable;
wire [31:0] basesoc_ledRGB_1_g_width;
wire [31:0] basesoc_ledRGB_1_g_period;
reg  [31:0] basesoc_ledRGB_1_g_counter = 32'd0;
reg  basesoc_ledRGB_1_g_enable_storage = 1'd0;
reg  basesoc_ledRGB_1_g_enable_re = 1'd0;
reg  [31:0] basesoc_ledRGB_1_g_width_storage = 32'd0;
reg  basesoc_ledRGB_1_g_width_re = 1'd0;
reg  [31:0] basesoc_ledRGB_1_g_period_storage = 32'd0;
reg  basesoc_ledRGB_1_g_period_re = 1'd0;
wire basesoc_ledRGB_1_b_enable;
wire [31:0] basesoc_ledRGB_1_b_width;
wire [31:0] basesoc_ledRGB_1_b_period;
reg  [31:0] basesoc_ledRGB_1_b_counter = 32'd0;
reg  basesoc_ledRGB_1_b_enable_storage = 1'd0;
reg  basesoc_ledRGB_1_b_enable_re = 1'd0;
reg  [31:0] basesoc_ledRGB_1_b_width_storage = 32'd0;
reg  basesoc_ledRGB_1_b_width_re = 1'd0;
reg  [31:0] basesoc_ledRGB_1_b_period_storage = 32'd0;
reg  basesoc_ledRGB_1_b_period_re = 1'd0;
wire basesoc_ledRGB_2_r_enable;
wire [31:0] basesoc_ledRGB_2_r_width;
wire [31:0] basesoc_ledRGB_2_r_period;
reg  [31:0] basesoc_ledRGB_2_r_counter = 32'd0;
reg  basesoc_ledRGB_2_r_enable_storage = 1'd0;
reg  basesoc_ledRGB_2_r_enable_re = 1'd0;
reg  [31:0] basesoc_ledRGB_2_r_width_storage = 32'd0;
reg  basesoc_ledRGB_2_r_width_re = 1'd0;
reg  [31:0] basesoc_ledRGB_2_r_period_storage = 32'd0;
reg  basesoc_ledRGB_2_r_period_re = 1'd0;
wire basesoc_ledRGB_2_g_enable;
wire [31:0] basesoc_ledRGB_2_g_width;
wire [31:0] basesoc_ledRGB_2_g_period;
reg  [31:0] basesoc_ledRGB_2_g_counter = 32'd0;
reg  basesoc_ledRGB_2_g_enable_storage = 1'd0;
reg  basesoc_ledRGB_2_g_enable_re = 1'd0;
reg  [31:0] basesoc_ledRGB_2_g_width_storage = 32'd0;
reg  basesoc_ledRGB_2_g_width_re = 1'd0;
reg  [31:0] basesoc_ledRGB_2_g_period_storage = 32'd0;
reg  basesoc_ledRGB_2_g_period_re = 1'd0;
wire basesoc_ledRGB_2_b_enable;
wire [31:0] basesoc_ledRGB_2_b_width;
wire [31:0] basesoc_ledRGB_2_b_period;
reg  [31:0] basesoc_ledRGB_2_b_counter = 32'd0;
reg  basesoc_ledRGB_2_b_enable_storage = 1'd0;
reg  basesoc_ledRGB_2_b_enable_re = 1'd0;
reg  [31:0] basesoc_ledRGB_2_b_width_storage = 32'd0;
reg  basesoc_ledRGB_2_b_width_re = 1'd0;
reg  [31:0] basesoc_ledRGB_2_b_period_storage = 32'd0;
reg  basesoc_ledRGB_2_b_period_re = 1'd0;
wire basesoc_uart_wifi_phy_tx_sink_valid;
reg  basesoc_uart_wifi_phy_tx_sink_ready = 1'd0;
wire basesoc_uart_wifi_phy_tx_sink_first;
wire basesoc_uart_wifi_phy_tx_sink_last;
wire [7:0] basesoc_uart_wifi_phy_tx_sink_payload_data;
reg  [7:0] basesoc_uart_wifi_phy_tx_data = 8'd0;
reg  [3:0] basesoc_uart_wifi_phy_tx_count = 4'd0;
reg  basesoc_uart_wifi_phy_tx_enable = 1'd0;
reg  basesoc_uart_wifi_phy_tx_tick = 1'd0;
reg  [31:0] basesoc_uart_wifi_phy_tx_phase = 32'd0;
reg  basesoc_uart_wifi_phy_rx_source_valid = 1'd0;
wire basesoc_uart_wifi_phy_rx_source_ready;
reg  basesoc_uart_wifi_phy_rx_source_first = 1'd0;
reg  basesoc_uart_wifi_phy_rx_source_last = 1'd0;
reg  [7:0] basesoc_uart_wifi_phy_rx_source_payload_data = 8'd0;
reg  [7:0] basesoc_uart_wifi_phy_rx_data = 8'd0;
reg  [3:0] basesoc_uart_wifi_phy_rx_count = 4'd0;
reg  basesoc_uart_wifi_phy_rx_enable = 1'd0;
reg  basesoc_uart_wifi_phy_rx_tick = 1'd0;
reg  [31:0] basesoc_uart_wifi_phy_rx_phase = 32'd0;
wire basesoc_uart_wifi_phy_rx_rx;
reg  basesoc_uart_wifi_phy_rx_rx_d = 1'd0;
reg  basesoc_rxtx_re = 1'd0;
wire [7:0] basesoc_rxtx_r;
reg  basesoc_rxtx_we = 1'd0;
wire [7:0] basesoc_rxtx_w;
wire basesoc_txfull_status;
wire basesoc_txfull_we;
reg  basesoc_txfull_re = 1'd0;
wire basesoc_rxempty_status;
wire basesoc_rxempty_we;
reg  basesoc_rxempty_re = 1'd0;
wire basesoc_irq;
wire basesoc_tx_status;
reg  basesoc_tx_pending = 1'd0;
wire basesoc_tx_trigger;
reg  basesoc_tx_clear = 1'd0;
reg  basesoc_tx_trigger_d = 1'd0;
wire basesoc_rx_status;
reg  basesoc_rx_pending = 1'd0;
wire basesoc_rx_trigger;
reg  basesoc_rx_clear = 1'd0;
reg  basesoc_rx_trigger_d = 1'd0;
wire basesoc_tx0;
wire basesoc_rx0;
reg  [1:0] basesoc_status_status = 2'd0;
wire basesoc_status_we;
reg  basesoc_status_re = 1'd0;
wire basesoc_tx1;
wire basesoc_rx1;
reg  [1:0] basesoc_pending_status = 2'd0;
wire basesoc_pending_we;
reg  basesoc_pending_re = 1'd0;
reg  [1:0] basesoc_pending_r = 2'd0;
wire basesoc_tx2;
wire basesoc_rx2;
reg  [1:0] basesoc_enable_storage = 2'd0;
reg  basesoc_enable_re = 1'd0;
wire basesoc_txempty_status;
wire basesoc_txempty_we;
reg  basesoc_txempty_re = 1'd0;
wire basesoc_rxfull_status;
wire basesoc_rxfull_we;
reg  basesoc_rxfull_re = 1'd0;
wire basesoc_uart_sink_valid;
wire basesoc_uart_sink_ready;
wire basesoc_uart_sink_first;
wire basesoc_uart_sink_last;
wire [7:0] basesoc_uart_sink_payload_data;
wire basesoc_uart_source_valid;
wire basesoc_uart_source_ready;
wire basesoc_uart_source_first;
wire basesoc_uart_source_last;
wire [7:0] basesoc_uart_source_payload_data;
wire basesoc_tx_fifo_sink_valid;
wire basesoc_tx_fifo_sink_ready;
reg  basesoc_tx_fifo_sink_first = 1'd0;
reg  basesoc_tx_fifo_sink_last = 1'd0;
wire [7:0] basesoc_tx_fifo_sink_payload_data;
wire basesoc_tx_fifo_source_valid;
wire basesoc_tx_fifo_source_ready;
wire basesoc_tx_fifo_source_first;
wire basesoc_tx_fifo_source_last;
wire [7:0] basesoc_tx_fifo_source_payload_data;
wire basesoc_tx_fifo_re;
reg  basesoc_tx_fifo_readable = 1'd0;
wire basesoc_tx_fifo_syncfifo_we;
wire basesoc_tx_fifo_syncfifo_writable;
wire basesoc_tx_fifo_syncfifo_re;
wire basesoc_tx_fifo_syncfifo_readable;
wire [9:0] basesoc_tx_fifo_syncfifo_din;
wire [9:0] basesoc_tx_fifo_syncfifo_dout;
reg  [4:0] basesoc_tx_fifo_level0 = 5'd0;
reg  basesoc_tx_fifo_replace = 1'd0;
reg  [3:0] basesoc_tx_fifo_produce = 4'd0;
reg  [3:0] basesoc_tx_fifo_consume = 4'd0;
reg  [3:0] basesoc_tx_fifo_wrport_adr = 4'd0;
wire [9:0] basesoc_tx_fifo_wrport_dat_r;
wire basesoc_tx_fifo_wrport_we;
wire [9:0] basesoc_tx_fifo_wrport_dat_w;
wire basesoc_tx_fifo_do_read;
wire [3:0] basesoc_tx_fifo_rdport_adr;
wire [9:0] basesoc_tx_fifo_rdport_dat_r;
wire basesoc_tx_fifo_rdport_re;
wire [4:0] basesoc_tx_fifo_level1;
wire [7:0] basesoc_tx_fifo_fifo_in_payload_data;
wire basesoc_tx_fifo_fifo_in_first;
wire basesoc_tx_fifo_fifo_in_last;
wire [7:0] basesoc_tx_fifo_fifo_out_payload_data;
wire basesoc_tx_fifo_fifo_out_first;
wire basesoc_tx_fifo_fifo_out_last;
wire basesoc_rx_fifo_sink_valid;
wire basesoc_rx_fifo_sink_ready;
wire basesoc_rx_fifo_sink_first;
wire basesoc_rx_fifo_sink_last;
wire [7:0] basesoc_rx_fifo_sink_payload_data;
wire basesoc_rx_fifo_source_valid;
wire basesoc_rx_fifo_source_ready;
wire basesoc_rx_fifo_source_first;
wire basesoc_rx_fifo_source_last;
wire [7:0] basesoc_rx_fifo_source_payload_data;
wire basesoc_rx_fifo_re;
reg  basesoc_rx_fifo_readable = 1'd0;
wire basesoc_rx_fifo_syncfifo_we;
wire basesoc_rx_fifo_syncfifo_writable;
wire basesoc_rx_fifo_syncfifo_re;
wire basesoc_rx_fifo_syncfifo_readable;
wire [9:0] basesoc_rx_fifo_syncfifo_din;
wire [9:0] basesoc_rx_fifo_syncfifo_dout;
reg  [4:0] basesoc_rx_fifo_level0 = 5'd0;
reg  basesoc_rx_fifo_replace = 1'd0;
reg  [3:0] basesoc_rx_fifo_produce = 4'd0;
reg  [3:0] basesoc_rx_fifo_consume = 4'd0;
reg  [3:0] basesoc_rx_fifo_wrport_adr = 4'd0;
wire [9:0] basesoc_rx_fifo_wrport_dat_r;
wire basesoc_rx_fifo_wrport_we;
wire [9:0] basesoc_rx_fifo_wrport_dat_w;
wire basesoc_rx_fifo_do_read;
wire [3:0] basesoc_rx_fifo_rdport_adr;
wire [9:0] basesoc_rx_fifo_rdport_dat_r;
wire basesoc_rx_fifo_rdport_re;
wire [4:0] basesoc_rx_fifo_level1;
wire [7:0] basesoc_rx_fifo_fifo_in_payload_data;
wire basesoc_rx_fifo_fifo_in_first;
wire basesoc_rx_fifo_fifo_in_last;
wire [7:0] basesoc_rx_fifo_fifo_out_payload_data;
wire basesoc_rx_fifo_fifo_out_first;
wire basesoc_rx_fifo_fifo_out_last;
reg  basesoc_uart_wifi_reset = 1'd0;
reg  basesoc_rst_storage = 1'd0;
reg  basesoc_rst_re = 1'd0;
reg  [7:0] basesoc_pos_storage = 8'd0;
reg  basesoc_pos_re = 1'd0;
wire basesoc_pads_scl;
wire basesoc_pads_sda;
wire basesoc_scl;
wire basesoc_oe;
wire basesoc_sda0;
reg  [2:0] basesoc__w_storage = 3'd0;
reg  basesoc__w_re = 1'd0;
wire basesoc_sda1;
wire basesoc__r_status;
wire basesoc__r_we;
reg  basesoc__r_re = 1'd0;
reg  builder_rs232phytx0_state = 1'd0;
reg  builder_rs232phytx0_next_state = 1'd0;
reg  [3:0] basesoc_basesoc_tx_count_rs232phytx0_next_value0 = 4'd0;
reg  basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 = 1'd0;
reg  basesoc_basesoc_serial_tx_rs232phytx0_next_value1 = 1'd0;
reg  basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 = 1'd0;
reg  [7:0] basesoc_basesoc_tx_data_rs232phytx0_next_value2 = 8'd0;
reg  basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 = 1'd0;
reg  builder_rs232phyrx0_state = 1'd0;
reg  builder_rs232phyrx0_next_state = 1'd0;
reg  [3:0] basesoc_basesoc_rx_count_rs232phyrx0_next_value0 = 4'd0;
reg  basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 = 1'd0;
reg  [7:0] basesoc_basesoc_rx_data_rs232phyrx0_next_value1 = 8'd0;
reg  basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1 = 1'd0;
reg  builder_rs232phytx1_state = 1'd0;
reg  builder_rs232phytx1_next_state = 1'd0;
reg  [3:0] basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value0 = 4'd0;
reg  basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value_ce0 = 1'd0;
reg  basesoc_obj_uart_wifi_tx_rs232phytx1_next_value1 = 1'd0;
reg  basesoc_obj_uart_wifi_tx_rs232phytx1_next_value_ce1 = 1'd0;
reg  [7:0] basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value2 = 8'd0;
reg  basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value_ce2 = 1'd0;
reg  builder_rs232phyrx1_state = 1'd0;
reg  builder_rs232phyrx1_next_state = 1'd0;
reg  [3:0] basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value0 = 4'd0;
reg  basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value_ce0 = 1'd0;
reg  [7:0] basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value1 = 8'd0;
reg  basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value_ce1 = 1'd0;
reg  [13:0] builder_basesoc_adr = 14'd0;
reg  builder_basesoc_we = 1'd0;
reg  [31:0] builder_basesoc_dat_w = 32'd0;
wire [31:0] builder_basesoc_dat_r;
wire [29:0] builder_basesoc_wishbone_adr;
wire [31:0] builder_basesoc_wishbone_dat_w;
reg  [31:0] builder_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_basesoc_wishbone_sel;
wire builder_basesoc_wishbone_cyc;
wire builder_basesoc_wishbone_stb;
reg  builder_basesoc_wishbone_ack = 1'd0;
wire builder_basesoc_wishbone_we;
wire [2:0] builder_basesoc_wishbone_cti;
wire [1:0] builder_basesoc_wishbone_bte;
reg  builder_basesoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg  [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg  builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg  builder_grant = 1'd0;
reg  [3:0] builder_slave_sel = 4'd0;
reg  [3:0] builder_slave_sel_r = 4'd0;
reg  builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg  [19:0] builder_count = 20'd1000000;
wire [13:0] builder_interface0_bank_bus_adr;
wire builder_interface0_bank_bus_we;
wire [31:0] builder_interface0_bank_bus_dat_w;
reg  [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
reg  builder_csrbank0_in_re = 1'd0;
wire [2:0] builder_csrbank0_in_r;
reg  builder_csrbank0_in_we = 1'd0;
wire [2:0] builder_csrbank0_in_w;
wire builder_csrbank0_sel;
wire [13:0] builder_interface1_bank_bus_adr;
wire builder_interface1_bank_bus_we;
wire [31:0] builder_interface1_bank_bus_dat_w;
reg  [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
reg  builder_csrbank1_reset0_re = 1'd0;
wire [1:0] builder_csrbank1_reset0_r;
reg  builder_csrbank1_reset0_we = 1'd0;
wire [1:0] builder_csrbank1_reset0_w;
reg  builder_csrbank1_scratch0_re = 1'd0;
wire [31:0] builder_csrbank1_scratch0_r;
reg  builder_csrbank1_scratch0_we = 1'd0;
wire [31:0] builder_csrbank1_scratch0_w;
reg  builder_csrbank1_bus_errors_re = 1'd0;
wire [31:0] builder_csrbank1_bus_errors_r;
reg  builder_csrbank1_bus_errors_we = 1'd0;
wire [31:0] builder_csrbank1_bus_errors_w;
wire builder_csrbank1_sel;
wire [13:0] builder_interface2_bank_bus_adr;
wire builder_interface2_bank_bus_we;
wire [31:0] builder_interface2_bank_bus_dat_w;
reg  [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
reg  builder_csrbank2_dig_00_re = 1'd0;
wire [7:0] builder_csrbank2_dig_00_r;
reg  builder_csrbank2_dig_00_we = 1'd0;
wire [7:0] builder_csrbank2_dig_00_w;
reg  builder_csrbank2_dig_10_re = 1'd0;
wire [7:0] builder_csrbank2_dig_10_r;
reg  builder_csrbank2_dig_10_we = 1'd0;
wire [7:0] builder_csrbank2_dig_10_w;
reg  builder_csrbank2_dig_20_re = 1'd0;
wire [7:0] builder_csrbank2_dig_20_r;
reg  builder_csrbank2_dig_20_we = 1'd0;
wire [7:0] builder_csrbank2_dig_20_w;
reg  builder_csrbank2_dig_30_re = 1'd0;
wire [7:0] builder_csrbank2_dig_30_r;
reg  builder_csrbank2_dig_30_we = 1'd0;
wire [7:0] builder_csrbank2_dig_30_w;
reg  builder_csrbank2_dig_40_re = 1'd0;
wire [7:0] builder_csrbank2_dig_40_r;
reg  builder_csrbank2_dig_40_we = 1'd0;
wire [7:0] builder_csrbank2_dig_40_w;
reg  builder_csrbank2_dig_50_re = 1'd0;
wire [7:0] builder_csrbank2_dig_50_r;
reg  builder_csrbank2_dig_50_we = 1'd0;
wire [7:0] builder_csrbank2_dig_50_w;
reg  builder_csrbank2_dig_60_re = 1'd0;
wire [7:0] builder_csrbank2_dig_60_r;
reg  builder_csrbank2_dig_60_we = 1'd0;
wire [7:0] builder_csrbank2_dig_60_w;
reg  builder_csrbank2_dig_70_re = 1'd0;
wire [7:0] builder_csrbank2_dig_70_r;
reg  builder_csrbank2_dig_70_we = 1'd0;
wire [7:0] builder_csrbank2_dig_70_w;
wire builder_csrbank2_sel;
wire [13:0] builder_interface3_bank_bus_adr;
wire builder_interface3_bank_bus_we;
wire [31:0] builder_interface3_bank_bus_dat_w;
reg  [31:0] builder_interface3_bank_bus_dat_r = 32'd0;
reg  builder_csrbank3_w0_re = 1'd0;
wire [2:0] builder_csrbank3_w0_r;
reg  builder_csrbank3_w0_we = 1'd0;
wire [2:0] builder_csrbank3_w0_w;
reg  builder_csrbank3_r_re = 1'd0;
wire builder_csrbank3_r_r;
reg  builder_csrbank3_r_we = 1'd0;
wire builder_csrbank3_r_w;
wire builder_csrbank3_sel;
wire [13:0] builder_interface4_bank_bus_adr;
wire builder_interface4_bank_bus_we;
wire [31:0] builder_interface4_bank_bus_dat_w;
reg  [31:0] builder_interface4_bank_bus_dat_r = 32'd0;
reg  builder_csrbank4_r_enable0_re = 1'd0;
wire builder_csrbank4_r_enable0_r;
reg  builder_csrbank4_r_enable0_we = 1'd0;
wire builder_csrbank4_r_enable0_w;
reg  builder_csrbank4_r_width0_re = 1'd0;
wire [31:0] builder_csrbank4_r_width0_r;
reg  builder_csrbank4_r_width0_we = 1'd0;
wire [31:0] builder_csrbank4_r_width0_w;
reg  builder_csrbank4_r_period0_re = 1'd0;
wire [31:0] builder_csrbank4_r_period0_r;
reg  builder_csrbank4_r_period0_we = 1'd0;
wire [31:0] builder_csrbank4_r_period0_w;
reg  builder_csrbank4_g_enable0_re = 1'd0;
wire builder_csrbank4_g_enable0_r;
reg  builder_csrbank4_g_enable0_we = 1'd0;
wire builder_csrbank4_g_enable0_w;
reg  builder_csrbank4_g_width0_re = 1'd0;
wire [31:0] builder_csrbank4_g_width0_r;
reg  builder_csrbank4_g_width0_we = 1'd0;
wire [31:0] builder_csrbank4_g_width0_w;
reg  builder_csrbank4_g_period0_re = 1'd0;
wire [31:0] builder_csrbank4_g_period0_r;
reg  builder_csrbank4_g_period0_we = 1'd0;
wire [31:0] builder_csrbank4_g_period0_w;
reg  builder_csrbank4_b_enable0_re = 1'd0;
wire builder_csrbank4_b_enable0_r;
reg  builder_csrbank4_b_enable0_we = 1'd0;
wire builder_csrbank4_b_enable0_w;
reg  builder_csrbank4_b_width0_re = 1'd0;
wire [31:0] builder_csrbank4_b_width0_r;
reg  builder_csrbank4_b_width0_we = 1'd0;
wire [31:0] builder_csrbank4_b_width0_w;
reg  builder_csrbank4_b_period0_re = 1'd0;
wire [31:0] builder_csrbank4_b_period0_r;
reg  builder_csrbank4_b_period0_we = 1'd0;
wire [31:0] builder_csrbank4_b_period0_w;
wire builder_csrbank4_sel;
wire [13:0] builder_interface5_bank_bus_adr;
wire builder_interface5_bank_bus_we;
wire [31:0] builder_interface5_bank_bus_dat_w;
reg  [31:0] builder_interface5_bank_bus_dat_r = 32'd0;
reg  builder_csrbank5_r_enable0_re = 1'd0;
wire builder_csrbank5_r_enable0_r;
reg  builder_csrbank5_r_enable0_we = 1'd0;
wire builder_csrbank5_r_enable0_w;
reg  builder_csrbank5_r_width0_re = 1'd0;
wire [31:0] builder_csrbank5_r_width0_r;
reg  builder_csrbank5_r_width0_we = 1'd0;
wire [31:0] builder_csrbank5_r_width0_w;
reg  builder_csrbank5_r_period0_re = 1'd0;
wire [31:0] builder_csrbank5_r_period0_r;
reg  builder_csrbank5_r_period0_we = 1'd0;
wire [31:0] builder_csrbank5_r_period0_w;
reg  builder_csrbank5_g_enable0_re = 1'd0;
wire builder_csrbank5_g_enable0_r;
reg  builder_csrbank5_g_enable0_we = 1'd0;
wire builder_csrbank5_g_enable0_w;
reg  builder_csrbank5_g_width0_re = 1'd0;
wire [31:0] builder_csrbank5_g_width0_r;
reg  builder_csrbank5_g_width0_we = 1'd0;
wire [31:0] builder_csrbank5_g_width0_w;
reg  builder_csrbank5_g_period0_re = 1'd0;
wire [31:0] builder_csrbank5_g_period0_r;
reg  builder_csrbank5_g_period0_we = 1'd0;
wire [31:0] builder_csrbank5_g_period0_w;
reg  builder_csrbank5_b_enable0_re = 1'd0;
wire builder_csrbank5_b_enable0_r;
reg  builder_csrbank5_b_enable0_we = 1'd0;
wire builder_csrbank5_b_enable0_w;
reg  builder_csrbank5_b_width0_re = 1'd0;
wire [31:0] builder_csrbank5_b_width0_r;
reg  builder_csrbank5_b_width0_we = 1'd0;
wire [31:0] builder_csrbank5_b_width0_w;
reg  builder_csrbank5_b_period0_re = 1'd0;
wire [31:0] builder_csrbank5_b_period0_r;
reg  builder_csrbank5_b_period0_we = 1'd0;
wire [31:0] builder_csrbank5_b_period0_w;
wire builder_csrbank5_sel;
wire [13:0] builder_interface6_bank_bus_adr;
wire builder_interface6_bank_bus_we;
wire [31:0] builder_interface6_bank_bus_dat_w;
reg  [31:0] builder_interface6_bank_bus_dat_r = 32'd0;
reg  builder_csrbank6_out0_re = 1'd0;
wire [9:0] builder_csrbank6_out0_r;
reg  builder_csrbank6_out0_we = 1'd0;
wire [9:0] builder_csrbank6_out0_w;
wire builder_csrbank6_sel;
wire [13:0] builder_interface7_bank_bus_adr;
wire builder_interface7_bank_bus_we;
wire [31:0] builder_interface7_bank_bus_dat_w;
reg  [31:0] builder_interface7_bank_bus_dat_r = 32'd0;
reg  builder_csrbank7_rst0_re = 1'd0;
wire builder_csrbank7_rst0_r;
reg  builder_csrbank7_rst0_we = 1'd0;
wire builder_csrbank7_rst0_w;
reg  builder_csrbank7_pos0_re = 1'd0;
wire [7:0] builder_csrbank7_pos0_r;
reg  builder_csrbank7_pos0_we = 1'd0;
wire [7:0] builder_csrbank7_pos0_w;
wire builder_csrbank7_sel;
wire [13:0] builder_interface8_bank_bus_adr;
wire builder_interface8_bank_bus_we;
wire [31:0] builder_interface8_bank_bus_dat_w;
reg  [31:0] builder_interface8_bank_bus_dat_r = 32'd0;
reg  builder_csrbank8_in_re = 1'd0;
wire [7:0] builder_csrbank8_in_r;
reg  builder_csrbank8_in_we = 1'd0;
wire [7:0] builder_csrbank8_in_w;
wire builder_csrbank8_sel;
wire [13:0] builder_interface9_bank_bus_adr;
wire builder_interface9_bank_bus_we;
wire [31:0] builder_interface9_bank_bus_dat_w;
reg  [31:0] builder_interface9_bank_bus_dat_r = 32'd0;
reg  builder_csrbank9_load0_re = 1'd0;
wire [31:0] builder_csrbank9_load0_r;
reg  builder_csrbank9_load0_we = 1'd0;
wire [31:0] builder_csrbank9_load0_w;
reg  builder_csrbank9_reload0_re = 1'd0;
wire [31:0] builder_csrbank9_reload0_r;
reg  builder_csrbank9_reload0_we = 1'd0;
wire [31:0] builder_csrbank9_reload0_w;
reg  builder_csrbank9_en0_re = 1'd0;
wire builder_csrbank9_en0_r;
reg  builder_csrbank9_en0_we = 1'd0;
wire builder_csrbank9_en0_w;
reg  builder_csrbank9_update_value0_re = 1'd0;
wire builder_csrbank9_update_value0_r;
reg  builder_csrbank9_update_value0_we = 1'd0;
wire builder_csrbank9_update_value0_w;
reg  builder_csrbank9_value_re = 1'd0;
wire [31:0] builder_csrbank9_value_r;
reg  builder_csrbank9_value_we = 1'd0;
wire [31:0] builder_csrbank9_value_w;
reg  builder_csrbank9_ev_status_re = 1'd0;
wire builder_csrbank9_ev_status_r;
reg  builder_csrbank9_ev_status_we = 1'd0;
wire builder_csrbank9_ev_status_w;
reg  builder_csrbank9_ev_pending_re = 1'd0;
wire builder_csrbank9_ev_pending_r;
reg  builder_csrbank9_ev_pending_we = 1'd0;
wire builder_csrbank9_ev_pending_w;
reg  builder_csrbank9_ev_enable0_re = 1'd0;
wire builder_csrbank9_ev_enable0_r;
reg  builder_csrbank9_ev_enable0_we = 1'd0;
wire builder_csrbank9_ev_enable0_w;
wire builder_csrbank9_sel;
wire [13:0] builder_interface10_bank_bus_adr;
wire builder_interface10_bank_bus_we;
wire [31:0] builder_interface10_bank_bus_dat_w;
reg  [31:0] builder_interface10_bank_bus_dat_r = 32'd0;
reg  builder_csrbank10_txfull_re = 1'd0;
wire builder_csrbank10_txfull_r;
reg  builder_csrbank10_txfull_we = 1'd0;
wire builder_csrbank10_txfull_w;
reg  builder_csrbank10_rxempty_re = 1'd0;
wire builder_csrbank10_rxempty_r;
reg  builder_csrbank10_rxempty_we = 1'd0;
wire builder_csrbank10_rxempty_w;
reg  builder_csrbank10_ev_status_re = 1'd0;
wire [1:0] builder_csrbank10_ev_status_r;
reg  builder_csrbank10_ev_status_we = 1'd0;
wire [1:0] builder_csrbank10_ev_status_w;
reg  builder_csrbank10_ev_pending_re = 1'd0;
wire [1:0] builder_csrbank10_ev_pending_r;
reg  builder_csrbank10_ev_pending_we = 1'd0;
wire [1:0] builder_csrbank10_ev_pending_w;
reg  builder_csrbank10_ev_enable0_re = 1'd0;
wire [1:0] builder_csrbank10_ev_enable0_r;
reg  builder_csrbank10_ev_enable0_we = 1'd0;
wire [1:0] builder_csrbank10_ev_enable0_w;
reg  builder_csrbank10_txempty_re = 1'd0;
wire builder_csrbank10_txempty_r;
reg  builder_csrbank10_txempty_we = 1'd0;
wire builder_csrbank10_txempty_w;
reg  builder_csrbank10_rxfull_re = 1'd0;
wire builder_csrbank10_rxfull_r;
reg  builder_csrbank10_rxfull_we = 1'd0;
wire builder_csrbank10_rxfull_w;
wire builder_csrbank10_sel;
wire [13:0] builder_interface11_bank_bus_adr;
wire builder_interface11_bank_bus_we;
wire [31:0] builder_interface11_bank_bus_dat_w;
reg  [31:0] builder_interface11_bank_bus_dat_r = 32'd0;
reg  builder_csrbank11_txfull_re = 1'd0;
wire builder_csrbank11_txfull_r;
reg  builder_csrbank11_txfull_we = 1'd0;
wire builder_csrbank11_txfull_w;
reg  builder_csrbank11_rxempty_re = 1'd0;
wire builder_csrbank11_rxempty_r;
reg  builder_csrbank11_rxempty_we = 1'd0;
wire builder_csrbank11_rxempty_w;
reg  builder_csrbank11_ev_status_re = 1'd0;
wire [1:0] builder_csrbank11_ev_status_r;
reg  builder_csrbank11_ev_status_we = 1'd0;
wire [1:0] builder_csrbank11_ev_status_w;
reg  builder_csrbank11_ev_pending_re = 1'd0;
wire [1:0] builder_csrbank11_ev_pending_r;
reg  builder_csrbank11_ev_pending_we = 1'd0;
wire [1:0] builder_csrbank11_ev_pending_w;
reg  builder_csrbank11_ev_enable0_re = 1'd0;
wire [1:0] builder_csrbank11_ev_enable0_r;
reg  builder_csrbank11_ev_enable0_we = 1'd0;
wire [1:0] builder_csrbank11_ev_enable0_w;
reg  builder_csrbank11_txempty_re = 1'd0;
wire builder_csrbank11_txempty_r;
reg  builder_csrbank11_txempty_we = 1'd0;
wire builder_csrbank11_txempty_w;
reg  builder_csrbank11_rxfull_re = 1'd0;
wire builder_csrbank11_rxfull_r;
reg  builder_csrbank11_rxfull_we = 1'd0;
wire builder_csrbank11_rxfull_w;
wire builder_csrbank11_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg  builder_state = 1'd0;
reg  builder_next_state = 1'd0;
reg  [7:0] builder_array_muxed0 = 8'd0;
reg  [29:0] builder_array_muxed1 = 30'd0;
reg  [31:0] builder_array_muxed2 = 32'd0;
reg  [3:0] builder_array_muxed3 = 4'd0;
reg  builder_array_muxed4 = 1'd0;
reg  builder_array_muxed5 = 1'd0;
reg  builder_array_muxed6 = 1'd0;
reg  [2:0] builder_array_muxed7 = 3'd0;
reg  [1:0] builder_array_muxed8 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  builder_xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg  builder_xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  [7:0] builder_xilinxmultiregimpl1_regs0 = 8'd0;
(* async_reg = "true", dont_touch = "true" *) reg  [7:0] builder_xilinxmultiregimpl1_regs1 = 8'd0;
wire builder_xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  [2:0] builder_xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *) reg  [2:0] builder_xilinxmultiregimpl2_regs1 = 3'd0;
wire builder_xilinxmultiregimpl2;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  builder_xilinxmultiregimpl3_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg  builder_xilinxmultiregimpl3_regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_basesoc_reset = (basesoc_basesoc_soc_rst | basesoc_basesoc_cpu_rst);
assign basesoc_basesoc_bus_error = builder_error;
always @(*) begin
	basesoc_basesoc_interrupt <= 32'd0;
	basesoc_basesoc_interrupt[1] <= basesoc_basesoc_timer_irq;
	basesoc_basesoc_interrupt[0] <= basesoc_basesoc_uart_irq;
	basesoc_basesoc_interrupt[2] <= basesoc_irq;
end
assign basesoc_basesoc_bus_errors_status = basesoc_basesoc_bus_errors;
assign basesoc_basesoc_adr = basesoc_basesoc_ram_bus_adr[12:0];
assign basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_dat_r;
always @(*) begin
	basesoc_basesoc_sram0_we <= 4'd0;
	basesoc_basesoc_sram0_we[0] <= (((basesoc_basesoc_interface0_ram_bus_cyc & basesoc_basesoc_interface0_ram_bus_stb) & basesoc_basesoc_interface0_ram_bus_we) & basesoc_basesoc_interface0_ram_bus_sel[0]);
	basesoc_basesoc_sram0_we[1] <= (((basesoc_basesoc_interface0_ram_bus_cyc & basesoc_basesoc_interface0_ram_bus_stb) & basesoc_basesoc_interface0_ram_bus_we) & basesoc_basesoc_interface0_ram_bus_sel[1]);
	basesoc_basesoc_sram0_we[2] <= (((basesoc_basesoc_interface0_ram_bus_cyc & basesoc_basesoc_interface0_ram_bus_stb) & basesoc_basesoc_interface0_ram_bus_we) & basesoc_basesoc_interface0_ram_bus_sel[2]);
	basesoc_basesoc_sram0_we[3] <= (((basesoc_basesoc_interface0_ram_bus_cyc & basesoc_basesoc_interface0_ram_bus_stb) & basesoc_basesoc_interface0_ram_bus_we) & basesoc_basesoc_interface0_ram_bus_sel[3]);
end
assign basesoc_basesoc_sram0_adr = basesoc_basesoc_interface0_ram_bus_adr[10:0];
assign basesoc_basesoc_interface0_ram_bus_dat_r = basesoc_basesoc_sram0_dat_r;
assign basesoc_basesoc_sram0_dat_w = basesoc_basesoc_interface0_ram_bus_dat_w;
always @(*) begin
	basesoc_basesoc_sram1_we <= 4'd0;
	basesoc_basesoc_sram1_we[0] <= (((basesoc_basesoc_interface1_ram_bus_cyc & basesoc_basesoc_interface1_ram_bus_stb) & basesoc_basesoc_interface1_ram_bus_we) & basesoc_basesoc_interface1_ram_bus_sel[0]);
	basesoc_basesoc_sram1_we[1] <= (((basesoc_basesoc_interface1_ram_bus_cyc & basesoc_basesoc_interface1_ram_bus_stb) & basesoc_basesoc_interface1_ram_bus_we) & basesoc_basesoc_interface1_ram_bus_sel[1]);
	basesoc_basesoc_sram1_we[2] <= (((basesoc_basesoc_interface1_ram_bus_cyc & basesoc_basesoc_interface1_ram_bus_stb) & basesoc_basesoc_interface1_ram_bus_we) & basesoc_basesoc_interface1_ram_bus_sel[2]);
	basesoc_basesoc_sram1_we[3] <= (((basesoc_basesoc_interface1_ram_bus_cyc & basesoc_basesoc_interface1_ram_bus_stb) & basesoc_basesoc_interface1_ram_bus_we) & basesoc_basesoc_interface1_ram_bus_sel[3]);
end
assign basesoc_basesoc_sram1_adr = basesoc_basesoc_interface1_ram_bus_adr[11:0];
assign basesoc_basesoc_interface1_ram_bus_dat_r = basesoc_basesoc_sram1_dat_r;
assign basesoc_basesoc_sram1_dat_w = basesoc_basesoc_interface1_ram_bus_dat_w;
always @(*) begin
	basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= 1'd0;
	basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd0;
	basesoc_basesoc_tx_data_rs232phytx0_next_value2 <= 8'd0;
	basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 <= 1'd0;
	basesoc_basesoc_tx_enable <= 1'd0;
	builder_rs232phytx0_next_state <= 1'd0;
	basesoc_basesoc_tx_count_rs232phytx0_next_value0 <= 4'd0;
	basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 <= 1'd0;
	basesoc_basesoc_tx_sink_ready <= 1'd0;
	builder_rs232phytx0_next_state <= builder_rs232phytx0_state;
	case (builder_rs232phytx0_state)
		1'd1: begin
			basesoc_basesoc_tx_enable <= 1'd1;
			if (basesoc_basesoc_tx_tick) begin
				basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= basesoc_basesoc_tx_data;
				basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd1;
				basesoc_basesoc_tx_count_rs232phytx0_next_value0 <= (basesoc_basesoc_tx_count + 1'd1);
				basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 <= 1'd1;
				basesoc_basesoc_tx_data_rs232phytx0_next_value2 <= {1'd1, basesoc_basesoc_tx_data[7:1]};
				basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 <= 1'd1;
				if ((basesoc_basesoc_tx_count == 4'd9)) begin
					basesoc_basesoc_tx_sink_ready <= 1'd1;
					builder_rs232phytx0_next_state <= 1'd0;
				end
			end
		end
		default: begin
			basesoc_basesoc_tx_count_rs232phytx0_next_value0 <= 1'd0;
			basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 <= 1'd1;
			basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= 1'd1;
			basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd1;
			if (basesoc_basesoc_tx_sink_valid) begin
				basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= 1'd0;
				basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd1;
				basesoc_basesoc_tx_data_rs232phytx0_next_value2 <= basesoc_basesoc_tx_sink_payload_data;
				basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 <= 1'd1;
				builder_rs232phytx0_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	basesoc_basesoc_rx_source_valid <= 1'd0;
	basesoc_basesoc_rx_data_rs232phyrx0_next_value1 <= 8'd0;
	basesoc_basesoc_rx_source_payload_data <= 8'd0;
	basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1 <= 1'd0;
	basesoc_basesoc_rx_enable <= 1'd0;
	builder_rs232phyrx0_next_state <= 1'd0;
	basesoc_basesoc_rx_count_rs232phyrx0_next_value0 <= 4'd0;
	basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 <= 1'd0;
	builder_rs232phyrx0_next_state <= builder_rs232phyrx0_state;
	case (builder_rs232phyrx0_state)
		1'd1: begin
			basesoc_basesoc_rx_enable <= 1'd1;
			if (basesoc_basesoc_rx_tick) begin
				basesoc_basesoc_rx_count_rs232phyrx0_next_value0 <= (basesoc_basesoc_rx_count + 1'd1);
				basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 <= 1'd1;
				basesoc_basesoc_rx_data_rs232phyrx0_next_value1 <= {basesoc_basesoc_rx_rx, basesoc_basesoc_rx_data[7:1]};
				basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1 <= 1'd1;
				if ((basesoc_basesoc_rx_count == 4'd9)) begin
					basesoc_basesoc_rx_source_valid <= (basesoc_basesoc_rx_rx == 1'd1);
					basesoc_basesoc_rx_source_payload_data <= basesoc_basesoc_rx_data;
					builder_rs232phyrx0_next_state <= 1'd0;
				end
			end
		end
		default: begin
			basesoc_basesoc_rx_count_rs232phyrx0_next_value0 <= 1'd0;
			basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 <= 1'd1;
			if (((basesoc_basesoc_rx_rx == 1'd0) & (basesoc_basesoc_rx_rx_d == 1'd1))) begin
				builder_rs232phyrx0_next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_basesoc_uart_uart_sink_valid = basesoc_basesoc_rx_source_valid;
assign basesoc_basesoc_rx_source_ready = basesoc_basesoc_uart_uart_sink_ready;
assign basesoc_basesoc_uart_uart_sink_first = basesoc_basesoc_rx_source_first;
assign basesoc_basesoc_uart_uart_sink_last = basesoc_basesoc_rx_source_last;
assign basesoc_basesoc_uart_uart_sink_payload_data = basesoc_basesoc_rx_source_payload_data;
assign basesoc_basesoc_tx_sink_valid = basesoc_basesoc_uart_uart_source_valid;
assign basesoc_basesoc_uart_uart_source_ready = basesoc_basesoc_tx_sink_ready;
assign basesoc_basesoc_tx_sink_first = basesoc_basesoc_uart_uart_source_first;
assign basesoc_basesoc_tx_sink_last = basesoc_basesoc_uart_uart_source_last;
assign basesoc_basesoc_tx_sink_payload_data = basesoc_basesoc_uart_uart_source_payload_data;
assign basesoc_basesoc_uart_tx_fifo_sink_valid = basesoc_basesoc_uart_rxtx_re;
assign basesoc_basesoc_uart_tx_fifo_sink_payload_data = basesoc_basesoc_uart_rxtx_r;
assign basesoc_basesoc_uart_uart_source_valid = basesoc_basesoc_uart_tx_fifo_source_valid;
assign basesoc_basesoc_uart_tx_fifo_source_ready = basesoc_basesoc_uart_uart_source_ready;
assign basesoc_basesoc_uart_uart_source_first = basesoc_basesoc_uart_tx_fifo_source_first;
assign basesoc_basesoc_uart_uart_source_last = basesoc_basesoc_uart_tx_fifo_source_last;
assign basesoc_basesoc_uart_uart_source_payload_data = basesoc_basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_basesoc_uart_txfull_status = (~basesoc_basesoc_uart_tx_fifo_sink_ready);
assign basesoc_basesoc_uart_txempty_status = (~basesoc_basesoc_uart_tx_fifo_source_valid);
assign basesoc_basesoc_uart_tx_trigger = basesoc_basesoc_uart_tx_fifo_sink_ready;
assign basesoc_basesoc_uart_rx_fifo_sink_valid = basesoc_basesoc_uart_uart_sink_valid;
assign basesoc_basesoc_uart_uart_sink_ready = basesoc_basesoc_uart_rx_fifo_sink_ready;
assign basesoc_basesoc_uart_rx_fifo_sink_first = basesoc_basesoc_uart_uart_sink_first;
assign basesoc_basesoc_uart_rx_fifo_sink_last = basesoc_basesoc_uart_uart_sink_last;
assign basesoc_basesoc_uart_rx_fifo_sink_payload_data = basesoc_basesoc_uart_uart_sink_payload_data;
assign basesoc_basesoc_uart_rxtx_w = basesoc_basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_basesoc_uart_rx_fifo_source_ready = (basesoc_basesoc_uart_rx_clear | (1'd0 & basesoc_basesoc_uart_rxtx_we));
assign basesoc_basesoc_uart_rxempty_status = (~basesoc_basesoc_uart_rx_fifo_source_valid);
assign basesoc_basesoc_uart_rxfull_status = (~basesoc_basesoc_uart_rx_fifo_sink_ready);
assign basesoc_basesoc_uart_rx_trigger = basesoc_basesoc_uart_rx_fifo_source_valid;
assign basesoc_basesoc_uart_tx0 = basesoc_basesoc_uart_tx_status;
assign basesoc_basesoc_uart_tx1 = basesoc_basesoc_uart_tx_pending;
always @(*) begin
	basesoc_basesoc_uart_tx_clear <= 1'd0;
	if ((basesoc_basesoc_uart_pending_re & basesoc_basesoc_uart_pending_r[0])) begin
		basesoc_basesoc_uart_tx_clear <= 1'd1;
	end
end
assign basesoc_basesoc_uart_rx0 = basesoc_basesoc_uart_rx_status;
assign basesoc_basesoc_uart_rx1 = basesoc_basesoc_uart_rx_pending;
always @(*) begin
	basesoc_basesoc_uart_rx_clear <= 1'd0;
	if ((basesoc_basesoc_uart_pending_re & basesoc_basesoc_uart_pending_r[1])) begin
		basesoc_basesoc_uart_rx_clear <= 1'd1;
	end
end
assign basesoc_basesoc_uart_irq = ((basesoc_basesoc_uart_pending_status[0] & basesoc_basesoc_uart_enable_storage[0]) | (basesoc_basesoc_uart_pending_status[1] & basesoc_basesoc_uart_enable_storage[1]));
assign basesoc_basesoc_uart_tx_status = basesoc_basesoc_uart_tx_trigger;
assign basesoc_basesoc_uart_rx_status = basesoc_basesoc_uart_rx_trigger;
assign basesoc_basesoc_uart_tx_fifo_syncfifo_din = {basesoc_basesoc_uart_tx_fifo_fifo_in_last, basesoc_basesoc_uart_tx_fifo_fifo_in_first, basesoc_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_basesoc_uart_tx_fifo_fifo_out_last, basesoc_basesoc_uart_tx_fifo_fifo_out_first, basesoc_basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_basesoc_uart_tx_fifo_sink_ready = basesoc_basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_basesoc_uart_tx_fifo_syncfifo_we = basesoc_basesoc_uart_tx_fifo_sink_valid;
assign basesoc_basesoc_uart_tx_fifo_fifo_in_first = basesoc_basesoc_uart_tx_fifo_sink_first;
assign basesoc_basesoc_uart_tx_fifo_fifo_in_last = basesoc_basesoc_uart_tx_fifo_sink_last;
assign basesoc_basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_basesoc_uart_tx_fifo_source_valid = basesoc_basesoc_uart_tx_fifo_readable;
assign basesoc_basesoc_uart_tx_fifo_source_first = basesoc_basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_basesoc_uart_tx_fifo_source_last = basesoc_basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_basesoc_uart_tx_fifo_source_payload_data = basesoc_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_basesoc_uart_tx_fifo_re = basesoc_basesoc_uart_tx_fifo_source_ready;
assign basesoc_basesoc_uart_tx_fifo_syncfifo_re = (basesoc_basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_basesoc_uart_tx_fifo_readable) | basesoc_basesoc_uart_tx_fifo_re));
assign basesoc_basesoc_uart_tx_fifo_level1 = (basesoc_basesoc_uart_tx_fifo_level0 + basesoc_basesoc_uart_tx_fifo_readable);
always @(*) begin
	basesoc_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
	if (basesoc_basesoc_uart_tx_fifo_replace) begin
		basesoc_basesoc_uart_tx_fifo_wrport_adr <= (basesoc_basesoc_uart_tx_fifo_produce - 1'd1);
	end else begin
		basesoc_basesoc_uart_tx_fifo_wrport_adr <= basesoc_basesoc_uart_tx_fifo_produce;
	end
end
assign basesoc_basesoc_uart_tx_fifo_wrport_dat_w = basesoc_basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_basesoc_uart_tx_fifo_wrport_we = (basesoc_basesoc_uart_tx_fifo_syncfifo_we & (basesoc_basesoc_uart_tx_fifo_syncfifo_writable | basesoc_basesoc_uart_tx_fifo_replace));
assign basesoc_basesoc_uart_tx_fifo_do_read = (basesoc_basesoc_uart_tx_fifo_syncfifo_readable & basesoc_basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_basesoc_uart_tx_fifo_rdport_adr = basesoc_basesoc_uart_tx_fifo_consume;
assign basesoc_basesoc_uart_tx_fifo_syncfifo_dout = basesoc_basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_basesoc_uart_tx_fifo_rdport_re = basesoc_basesoc_uart_tx_fifo_do_read;
assign basesoc_basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_basesoc_uart_rx_fifo_syncfifo_din = {basesoc_basesoc_uart_rx_fifo_fifo_in_last, basesoc_basesoc_uart_rx_fifo_fifo_in_first, basesoc_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_basesoc_uart_rx_fifo_fifo_out_last, basesoc_basesoc_uart_rx_fifo_fifo_out_first, basesoc_basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_basesoc_uart_rx_fifo_sink_ready = basesoc_basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_basesoc_uart_rx_fifo_syncfifo_we = basesoc_basesoc_uart_rx_fifo_sink_valid;
assign basesoc_basesoc_uart_rx_fifo_fifo_in_first = basesoc_basesoc_uart_rx_fifo_sink_first;
assign basesoc_basesoc_uart_rx_fifo_fifo_in_last = basesoc_basesoc_uart_rx_fifo_sink_last;
assign basesoc_basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_basesoc_uart_rx_fifo_source_valid = basesoc_basesoc_uart_rx_fifo_readable;
assign basesoc_basesoc_uart_rx_fifo_source_first = basesoc_basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_basesoc_uart_rx_fifo_source_last = basesoc_basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_basesoc_uart_rx_fifo_source_payload_data = basesoc_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_basesoc_uart_rx_fifo_re = basesoc_basesoc_uart_rx_fifo_source_ready;
assign basesoc_basesoc_uart_rx_fifo_syncfifo_re = (basesoc_basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_basesoc_uart_rx_fifo_readable) | basesoc_basesoc_uart_rx_fifo_re));
assign basesoc_basesoc_uart_rx_fifo_level1 = (basesoc_basesoc_uart_rx_fifo_level0 + basesoc_basesoc_uart_rx_fifo_readable);
always @(*) begin
	basesoc_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
	if (basesoc_basesoc_uart_rx_fifo_replace) begin
		basesoc_basesoc_uart_rx_fifo_wrport_adr <= (basesoc_basesoc_uart_rx_fifo_produce - 1'd1);
	end else begin
		basesoc_basesoc_uart_rx_fifo_wrport_adr <= basesoc_basesoc_uart_rx_fifo_produce;
	end
end
assign basesoc_basesoc_uart_rx_fifo_wrport_dat_w = basesoc_basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_basesoc_uart_rx_fifo_wrport_we = (basesoc_basesoc_uart_rx_fifo_syncfifo_we & (basesoc_basesoc_uart_rx_fifo_syncfifo_writable | basesoc_basesoc_uart_rx_fifo_replace));
assign basesoc_basesoc_uart_rx_fifo_do_read = (basesoc_basesoc_uart_rx_fifo_syncfifo_readable & basesoc_basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_basesoc_uart_rx_fifo_rdport_adr = basesoc_basesoc_uart_rx_fifo_consume;
assign basesoc_basesoc_uart_rx_fifo_syncfifo_dout = basesoc_basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_basesoc_uart_rx_fifo_rdport_re = basesoc_basesoc_uart_rx_fifo_do_read;
assign basesoc_basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_basesoc_timer_zero_trigger = (basesoc_basesoc_timer_value == 1'd0);
assign basesoc_basesoc_timer_zero0 = basesoc_basesoc_timer_zero_status;
assign basesoc_basesoc_timer_zero1 = basesoc_basesoc_timer_zero_pending;
always @(*) begin
	basesoc_basesoc_timer_zero_clear <= 1'd0;
	if ((basesoc_basesoc_timer_pending_re & basesoc_basesoc_timer_pending_r)) begin
		basesoc_basesoc_timer_zero_clear <= 1'd1;
	end
end
assign basesoc_basesoc_timer_irq = (basesoc_basesoc_timer_pending_status & basesoc_basesoc_timer_enable_storage);
assign basesoc_basesoc_timer_zero_status = basesoc_basesoc_timer_zero_trigger;
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = basesoc_int_rst;
assign {led9, led8, led7, led6, led5, led4, led3, led2, led1, led0} = basesoc_leds_storage;
assign basesoc_displays0 = basesoc_dig_0_storage;
assign basesoc_displays1 = basesoc_dig_1_storage;
assign basesoc_displays2 = basesoc_dig_2_storage;
assign basesoc_displays3 = basesoc_dig_3_storage;
assign basesoc_displays4 = basesoc_dig_4_storage;
assign basesoc_displays5 = basesoc_dig_5_storage;
assign basesoc_displays6 = basesoc_dig_6_storage;
assign basesoc_displays7 = basesoc_dig_7_storage;
assign {display_digit7, display_digit6, display_digit5, display_digit4, display_digit3, display_digit2, display_digit1, display_digit0} = (~(1'd1 <<< basesoc_dgt_count));
assign {display_segment7, display_segment6, display_segment5, display_segment4, display_segment3, display_segment2, display_segment1, display_segment0} = (~builder_array_muxed0);
always @(*) begin
	basesoc_obj_uart_wifi_tx_rs232phytx1_next_value_ce1 <= 1'd0;
	basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value2 <= 8'd0;
	basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value_ce2 <= 1'd0;
	basesoc_uart_wifi_phy_tx_sink_ready <= 1'd0;
	builder_rs232phytx1_next_state <= 1'd0;
	basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value0 <= 4'd0;
	basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value_ce0 <= 1'd0;
	basesoc_obj_uart_wifi_tx_rs232phytx1_next_value1 <= 1'd0;
	basesoc_uart_wifi_phy_tx_enable <= 1'd0;
	builder_rs232phytx1_next_state <= builder_rs232phytx1_state;
	case (builder_rs232phytx1_state)
		1'd1: begin
			basesoc_uart_wifi_phy_tx_enable <= 1'd1;
			if (basesoc_uart_wifi_phy_tx_tick) begin
				basesoc_obj_uart_wifi_tx_rs232phytx1_next_value1 <= basesoc_uart_wifi_phy_tx_data;
				basesoc_obj_uart_wifi_tx_rs232phytx1_next_value_ce1 <= 1'd1;
				basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value0 <= (basesoc_uart_wifi_phy_tx_count + 1'd1);
				basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value_ce0 <= 1'd1;
				basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value2 <= {1'd1, basesoc_uart_wifi_phy_tx_data[7:1]};
				basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value_ce2 <= 1'd1;
				if ((basesoc_uart_wifi_phy_tx_count == 4'd9)) begin
					basesoc_uart_wifi_phy_tx_sink_ready <= 1'd1;
					builder_rs232phytx1_next_state <= 1'd0;
				end
			end
		end
		default: begin
			basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value0 <= 1'd0;
			basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value_ce0 <= 1'd1;
			basesoc_obj_uart_wifi_tx_rs232phytx1_next_value1 <= 1'd1;
			basesoc_obj_uart_wifi_tx_rs232phytx1_next_value_ce1 <= 1'd1;
			if (basesoc_uart_wifi_phy_tx_sink_valid) begin
				basesoc_obj_uart_wifi_tx_rs232phytx1_next_value1 <= 1'd0;
				basesoc_obj_uart_wifi_tx_rs232phytx1_next_value_ce1 <= 1'd1;
				basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value2 <= basesoc_uart_wifi_phy_tx_sink_payload_data;
				basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value_ce2 <= 1'd1;
				builder_rs232phytx1_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value1 <= 8'd0;
	basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value_ce1 <= 1'd0;
	basesoc_uart_wifi_phy_rx_enable <= 1'd0;
	basesoc_uart_wifi_phy_rx_source_valid <= 1'd0;
	basesoc_uart_wifi_phy_rx_source_payload_data <= 8'd0;
	builder_rs232phyrx1_next_state <= 1'd0;
	basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value0 <= 4'd0;
	basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value_ce0 <= 1'd0;
	builder_rs232phyrx1_next_state <= builder_rs232phyrx1_state;
	case (builder_rs232phyrx1_state)
		1'd1: begin
			basesoc_uart_wifi_phy_rx_enable <= 1'd1;
			if (basesoc_uart_wifi_phy_rx_tick) begin
				basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value0 <= (basesoc_uart_wifi_phy_rx_count + 1'd1);
				basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value_ce0 <= 1'd1;
				basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value1 <= {basesoc_uart_wifi_phy_rx_rx, basesoc_uart_wifi_phy_rx_data[7:1]};
				basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value_ce1 <= 1'd1;
				if ((basesoc_uart_wifi_phy_rx_count == 4'd9)) begin
					basesoc_uart_wifi_phy_rx_source_valid <= (basesoc_uart_wifi_phy_rx_rx == 1'd1);
					basesoc_uart_wifi_phy_rx_source_payload_data <= basesoc_uart_wifi_phy_rx_data;
					builder_rs232phyrx1_next_state <= 1'd0;
				end
			end
		end
		default: begin
			basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value0 <= 1'd0;
			basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value_ce0 <= 1'd1;
			if (((basesoc_uart_wifi_phy_rx_rx == 1'd0) & (basesoc_uart_wifi_phy_rx_rx_d == 1'd1))) begin
				builder_rs232phyrx1_next_state <= 1'd1;
			end
		end
	endcase
end
assign basesoc_uart_sink_valid = basesoc_uart_wifi_phy_rx_source_valid;
assign basesoc_uart_wifi_phy_rx_source_ready = basesoc_uart_sink_ready;
assign basesoc_uart_sink_first = basesoc_uart_wifi_phy_rx_source_first;
assign basesoc_uart_sink_last = basesoc_uart_wifi_phy_rx_source_last;
assign basesoc_uart_sink_payload_data = basesoc_uart_wifi_phy_rx_source_payload_data;
assign basesoc_uart_wifi_phy_tx_sink_valid = basesoc_uart_source_valid;
assign basesoc_uart_source_ready = basesoc_uart_wifi_phy_tx_sink_ready;
assign basesoc_uart_wifi_phy_tx_sink_first = basesoc_uart_source_first;
assign basesoc_uart_wifi_phy_tx_sink_last = basesoc_uart_source_last;
assign basesoc_uart_wifi_phy_tx_sink_payload_data = basesoc_uart_source_payload_data;
assign basesoc_tx_fifo_sink_valid = basesoc_rxtx_re;
assign basesoc_tx_fifo_sink_payload_data = basesoc_rxtx_r;
assign basesoc_uart_source_valid = basesoc_tx_fifo_source_valid;
assign basesoc_tx_fifo_source_ready = basesoc_uart_source_ready;
assign basesoc_uart_source_first = basesoc_tx_fifo_source_first;
assign basesoc_uart_source_last = basesoc_tx_fifo_source_last;
assign basesoc_uart_source_payload_data = basesoc_tx_fifo_source_payload_data;
assign basesoc_txfull_status = (~basesoc_tx_fifo_sink_ready);
assign basesoc_txempty_status = (~basesoc_tx_fifo_source_valid);
assign basesoc_tx_trigger = basesoc_tx_fifo_sink_ready;
assign basesoc_rx_fifo_sink_valid = basesoc_uart_sink_valid;
assign basesoc_uart_sink_ready = basesoc_rx_fifo_sink_ready;
assign basesoc_rx_fifo_sink_first = basesoc_uart_sink_first;
assign basesoc_rx_fifo_sink_last = basesoc_uart_sink_last;
assign basesoc_rx_fifo_sink_payload_data = basesoc_uart_sink_payload_data;
assign basesoc_rxtx_w = basesoc_rx_fifo_source_payload_data;
assign basesoc_rx_fifo_source_ready = (basesoc_rx_clear | (1'd0 & basesoc_rxtx_we));
assign basesoc_rxempty_status = (~basesoc_rx_fifo_source_valid);
assign basesoc_rxfull_status = (~basesoc_rx_fifo_sink_ready);
assign basesoc_rx_trigger = basesoc_rx_fifo_source_valid;
assign basesoc_tx0 = basesoc_tx_status;
assign basesoc_tx1 = basesoc_tx_pending;
always @(*) begin
	basesoc_tx_clear <= 1'd0;
	if ((basesoc_pending_re & basesoc_pending_r[0])) begin
		basesoc_tx_clear <= 1'd1;
	end
end
assign basesoc_rx0 = basesoc_rx_status;
assign basesoc_rx1 = basesoc_rx_pending;
always @(*) begin
	basesoc_rx_clear <= 1'd0;
	if ((basesoc_pending_re & basesoc_pending_r[1])) begin
		basesoc_rx_clear <= 1'd1;
	end
end
assign basesoc_irq = ((basesoc_pending_status[0] & basesoc_enable_storage[0]) | (basesoc_pending_status[1] & basesoc_enable_storage[1]));
assign basesoc_tx_status = basesoc_tx_trigger;
assign basesoc_rx_status = basesoc_rx_trigger;
assign basesoc_tx_fifo_syncfifo_din = {basesoc_tx_fifo_fifo_in_last, basesoc_tx_fifo_fifo_in_first, basesoc_tx_fifo_fifo_in_payload_data};
assign {basesoc_tx_fifo_fifo_out_last, basesoc_tx_fifo_fifo_out_first, basesoc_tx_fifo_fifo_out_payload_data} = basesoc_tx_fifo_syncfifo_dout;
assign basesoc_tx_fifo_sink_ready = basesoc_tx_fifo_syncfifo_writable;
assign basesoc_tx_fifo_syncfifo_we = basesoc_tx_fifo_sink_valid;
assign basesoc_tx_fifo_fifo_in_first = basesoc_tx_fifo_sink_first;
assign basesoc_tx_fifo_fifo_in_last = basesoc_tx_fifo_sink_last;
assign basesoc_tx_fifo_fifo_in_payload_data = basesoc_tx_fifo_sink_payload_data;
assign basesoc_tx_fifo_source_valid = basesoc_tx_fifo_readable;
assign basesoc_tx_fifo_source_first = basesoc_tx_fifo_fifo_out_first;
assign basesoc_tx_fifo_source_last = basesoc_tx_fifo_fifo_out_last;
assign basesoc_tx_fifo_source_payload_data = basesoc_tx_fifo_fifo_out_payload_data;
assign basesoc_tx_fifo_re = basesoc_tx_fifo_source_ready;
assign basesoc_tx_fifo_syncfifo_re = (basesoc_tx_fifo_syncfifo_readable & ((~basesoc_tx_fifo_readable) | basesoc_tx_fifo_re));
assign basesoc_tx_fifo_level1 = (basesoc_tx_fifo_level0 + basesoc_tx_fifo_readable);
always @(*) begin
	basesoc_tx_fifo_wrport_adr <= 4'd0;
	if (basesoc_tx_fifo_replace) begin
		basesoc_tx_fifo_wrport_adr <= (basesoc_tx_fifo_produce - 1'd1);
	end else begin
		basesoc_tx_fifo_wrport_adr <= basesoc_tx_fifo_produce;
	end
end
assign basesoc_tx_fifo_wrport_dat_w = basesoc_tx_fifo_syncfifo_din;
assign basesoc_tx_fifo_wrport_we = (basesoc_tx_fifo_syncfifo_we & (basesoc_tx_fifo_syncfifo_writable | basesoc_tx_fifo_replace));
assign basesoc_tx_fifo_do_read = (basesoc_tx_fifo_syncfifo_readable & basesoc_tx_fifo_syncfifo_re);
assign basesoc_tx_fifo_rdport_adr = basesoc_tx_fifo_consume;
assign basesoc_tx_fifo_syncfifo_dout = basesoc_tx_fifo_rdport_dat_r;
assign basesoc_tx_fifo_rdport_re = basesoc_tx_fifo_do_read;
assign basesoc_tx_fifo_syncfifo_writable = (basesoc_tx_fifo_level0 != 5'd16);
assign basesoc_tx_fifo_syncfifo_readable = (basesoc_tx_fifo_level0 != 1'd0);
assign basesoc_rx_fifo_syncfifo_din = {basesoc_rx_fifo_fifo_in_last, basesoc_rx_fifo_fifo_in_first, basesoc_rx_fifo_fifo_in_payload_data};
assign {basesoc_rx_fifo_fifo_out_last, basesoc_rx_fifo_fifo_out_first, basesoc_rx_fifo_fifo_out_payload_data} = basesoc_rx_fifo_syncfifo_dout;
assign basesoc_rx_fifo_sink_ready = basesoc_rx_fifo_syncfifo_writable;
assign basesoc_rx_fifo_syncfifo_we = basesoc_rx_fifo_sink_valid;
assign basesoc_rx_fifo_fifo_in_first = basesoc_rx_fifo_sink_first;
assign basesoc_rx_fifo_fifo_in_last = basesoc_rx_fifo_sink_last;
assign basesoc_rx_fifo_fifo_in_payload_data = basesoc_rx_fifo_sink_payload_data;
assign basesoc_rx_fifo_source_valid = basesoc_rx_fifo_readable;
assign basesoc_rx_fifo_source_first = basesoc_rx_fifo_fifo_out_first;
assign basesoc_rx_fifo_source_last = basesoc_rx_fifo_fifo_out_last;
assign basesoc_rx_fifo_source_payload_data = basesoc_rx_fifo_fifo_out_payload_data;
assign basesoc_rx_fifo_re = basesoc_rx_fifo_source_ready;
assign basesoc_rx_fifo_syncfifo_re = (basesoc_rx_fifo_syncfifo_readable & ((~basesoc_rx_fifo_readable) | basesoc_rx_fifo_re));
assign basesoc_rx_fifo_level1 = (basesoc_rx_fifo_level0 + basesoc_rx_fifo_readable);
always @(*) begin
	basesoc_rx_fifo_wrport_adr <= 4'd0;
	if (basesoc_rx_fifo_replace) begin
		basesoc_rx_fifo_wrport_adr <= (basesoc_rx_fifo_produce - 1'd1);
	end else begin
		basesoc_rx_fifo_wrport_adr <= basesoc_rx_fifo_produce;
	end
end
assign basesoc_rx_fifo_wrport_dat_w = basesoc_rx_fifo_syncfifo_din;
assign basesoc_rx_fifo_wrport_we = (basesoc_rx_fifo_syncfifo_we & (basesoc_rx_fifo_syncfifo_writable | basesoc_rx_fifo_replace));
assign basesoc_rx_fifo_do_read = (basesoc_rx_fifo_syncfifo_readable & basesoc_rx_fifo_syncfifo_re);
assign basesoc_rx_fifo_rdport_adr = basesoc_rx_fifo_consume;
assign basesoc_rx_fifo_syncfifo_dout = basesoc_rx_fifo_rdport_dat_r;
assign basesoc_rx_fifo_rdport_re = basesoc_rx_fifo_do_read;
assign basesoc_rx_fifo_syncfifo_writable = (basesoc_rx_fifo_level0 != 5'd16);
assign basesoc_rx_fifo_syncfifo_readable = (basesoc_rx_fifo_level0 != 1'd0);
always @(*) begin
	builder_next_state <= 1'd0;
	builder_basesoc_adr <= 14'd0;
	builder_basesoc_we <= 1'd0;
	builder_basesoc_wishbone_ack <= 1'd0;
	builder_basesoc_dat_w <= 32'd0;
	builder_basesoc_wishbone_dat_r <= 32'd0;
	builder_next_state <= builder_state;
	case (builder_state)
		1'd1: begin
			builder_basesoc_wishbone_ack <= 1'd1;
			builder_basesoc_wishbone_dat_r <= builder_basesoc_dat_r;
			builder_next_state <= 1'd0;
		end
		default: begin
			builder_basesoc_dat_w <= builder_basesoc_wishbone_dat_w;
			if ((builder_basesoc_wishbone_cyc & builder_basesoc_wishbone_stb)) begin
				builder_basesoc_adr <= builder_basesoc_wishbone_adr;
				builder_basesoc_we <= (builder_basesoc_wishbone_we & (builder_basesoc_wishbone_sel != 1'd0));
				builder_next_state <= 1'd1;
			end
		end
	endcase
end
assign builder_shared_adr = builder_array_muxed1;
assign builder_shared_dat_w = builder_array_muxed2;
assign builder_shared_sel = builder_array_muxed3;
assign builder_shared_cyc = builder_array_muxed4;
assign builder_shared_stb = builder_array_muxed5;
assign builder_shared_we = builder_array_muxed6;
assign builder_shared_cti = builder_array_muxed7;
assign builder_shared_bte = builder_array_muxed8;
assign basesoc_basesoc_ibus_dat_r = builder_shared_dat_r;
assign basesoc_basesoc_dbus_dat_r = builder_shared_dat_r;
assign basesoc_basesoc_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign basesoc_basesoc_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign basesoc_basesoc_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign basesoc_basesoc_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {basesoc_basesoc_dbus_cyc, basesoc_basesoc_ibus_cyc};
always @(*) begin
	builder_slave_sel <= 4'd0;
	builder_slave_sel[0] <= (builder_shared_adr[29:13] == 1'd0);
	builder_slave_sel[1] <= (builder_shared_adr[29:11] == 16'd32768);
	builder_slave_sel[2] <= (builder_shared_adr[29:12] == 17'd65536);
	builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign basesoc_basesoc_ram_bus_we = builder_shared_we;
assign basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign basesoc_basesoc_interface0_ram_bus_adr = builder_shared_adr;
assign basesoc_basesoc_interface0_ram_bus_dat_w = builder_shared_dat_w;
assign basesoc_basesoc_interface0_ram_bus_sel = builder_shared_sel;
assign basesoc_basesoc_interface0_ram_bus_stb = builder_shared_stb;
assign basesoc_basesoc_interface0_ram_bus_we = builder_shared_we;
assign basesoc_basesoc_interface0_ram_bus_cti = builder_shared_cti;
assign basesoc_basesoc_interface0_ram_bus_bte = builder_shared_bte;
assign basesoc_basesoc_interface1_ram_bus_adr = builder_shared_adr;
assign basesoc_basesoc_interface1_ram_bus_dat_w = builder_shared_dat_w;
assign basesoc_basesoc_interface1_ram_bus_sel = builder_shared_sel;
assign basesoc_basesoc_interface1_ram_bus_stb = builder_shared_stb;
assign basesoc_basesoc_interface1_ram_bus_we = builder_shared_we;
assign basesoc_basesoc_interface1_ram_bus_cti = builder_shared_cti;
assign basesoc_basesoc_interface1_ram_bus_bte = builder_shared_bte;
assign builder_basesoc_wishbone_adr = builder_shared_adr;
assign builder_basesoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_basesoc_wishbone_sel = builder_shared_sel;
assign builder_basesoc_wishbone_stb = builder_shared_stb;
assign builder_basesoc_wishbone_we = builder_shared_we;
assign builder_basesoc_wishbone_cti = builder_shared_cti;
assign builder_basesoc_wishbone_bte = builder_shared_bte;
assign basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign basesoc_basesoc_interface0_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign basesoc_basesoc_interface1_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_basesoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((basesoc_basesoc_ram_bus_err | basesoc_basesoc_interface0_ram_bus_err) | basesoc_basesoc_interface1_ram_bus_err) | builder_basesoc_wishbone_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_shared_dat_r <= 32'd0;
	builder_shared_ack <= 1'd0;
	builder_error <= 1'd0;
	builder_shared_ack <= (((basesoc_basesoc_ram_bus_ack | basesoc_basesoc_interface0_ram_bus_ack) | basesoc_basesoc_interface1_ram_bus_ack) | builder_basesoc_wishbone_ack);
	builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & basesoc_basesoc_interface0_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & basesoc_basesoc_interface1_ram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_basesoc_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
		builder_shared_ack <= 1'd1;
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank0_in_r = builder_interface0_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank0_in_re <= 1'd0;
	builder_csrbank0_in_we <= 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank0_in_re <= builder_interface0_bank_bus_we;
		builder_csrbank0_in_we <= (~builder_interface0_bank_bus_we);
	end
end
assign builder_csrbank0_in_w = basesoc_buttons_status[2:0];
assign basesoc_buttons_we = builder_csrbank0_in_we;
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 4'd10);
assign builder_csrbank1_reset0_r = builder_interface1_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank1_reset0_re <= 1'd0;
	builder_csrbank1_reset0_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank1_reset0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_reset0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_scratch0_r = builder_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank1_scratch0_we <= 1'd0;
	builder_csrbank1_scratch0_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank1_scratch0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_scratch0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_bus_errors_r = builder_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank1_bus_errors_re <= 1'd0;
	builder_csrbank1_bus_errors_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank1_bus_errors_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_bus_errors_we <= (~builder_interface1_bank_bus_we);
	end
end
always @(*) begin
	basesoc_basesoc_soc_rst <= 1'd0;
	if (basesoc_basesoc_reset_re) begin
		basesoc_basesoc_soc_rst <= basesoc_basesoc_reset_storage[0];
	end
end
assign basesoc_basesoc_cpu_rst = basesoc_basesoc_reset_storage[1];
assign builder_csrbank1_reset0_w = basesoc_basesoc_reset_storage[1:0];
assign builder_csrbank1_scratch0_w = basesoc_basesoc_scratch_storage[31:0];
assign builder_csrbank1_bus_errors_w = basesoc_basesoc_bus_errors_status[31:0];
assign basesoc_basesoc_bus_errors_we = builder_csrbank1_bus_errors_we;
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csrbank2_dig_00_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_00_we <= 1'd0;
	builder_csrbank2_dig_00_re <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank2_dig_00_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_00_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_10_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_10_re <= 1'd0;
	builder_csrbank2_dig_10_we <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank2_dig_10_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_10_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_20_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_20_we <= 1'd0;
	builder_csrbank2_dig_20_re <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank2_dig_20_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_20_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_30_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_30_re <= 1'd0;
	builder_csrbank2_dig_30_we <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank2_dig_30_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_30_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_40_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_40_re <= 1'd0;
	builder_csrbank2_dig_40_we <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank2_dig_40_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_40_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_50_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_50_we <= 1'd0;
	builder_csrbank2_dig_50_re <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank2_dig_50_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_50_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_60_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_60_re <= 1'd0;
	builder_csrbank2_dig_60_we <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank2_dig_60_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_60_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_70_r = builder_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank2_dig_70_we <= 1'd0;
	builder_csrbank2_dig_70_re <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank2_dig_70_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_dig_70_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_dig_00_w = basesoc_dig_0_storage[7:0];
assign builder_csrbank2_dig_10_w = basesoc_dig_1_storage[7:0];
assign builder_csrbank2_dig_20_w = basesoc_dig_2_storage[7:0];
assign builder_csrbank2_dig_30_w = basesoc_dig_3_storage[7:0];
assign builder_csrbank2_dig_40_w = basesoc_dig_4_storage[7:0];
assign builder_csrbank2_dig_50_w = basesoc_dig_5_storage[7:0];
assign builder_csrbank2_dig_60_w = basesoc_dig_6_storage[7:0];
assign builder_csrbank2_dig_70_w = basesoc_dig_7_storage[7:0];
assign builder_csrbank3_sel = (builder_interface3_bank_bus_adr[13:9] == 4'd9);
assign builder_csrbank3_w0_r = builder_interface3_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank3_w0_we <= 1'd0;
	builder_csrbank3_w0_re <= 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank3_w0_re <= builder_interface3_bank_bus_we;
		builder_csrbank3_w0_we <= (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_r_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank3_r_re <= 1'd0;
	builder_csrbank3_r_we <= 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank3_r_re <= builder_interface3_bank_bus_we;
		builder_csrbank3_r_we <= (~builder_interface3_bank_bus_we);
	end
end
assign basesoc_scl = basesoc__w_storage[0];
assign basesoc_oe = basesoc__w_storage[1];
assign basesoc_sda0 = basesoc__w_storage[2];
assign builder_csrbank3_w0_w = basesoc__w_storage[2:0];
assign basesoc__r_status = basesoc_sda1;
assign builder_csrbank3_r_w = basesoc__r_status;
assign basesoc__r_we = builder_csrbank3_r_we;
assign builder_csrbank4_sel = (builder_interface4_bank_bus_adr[13:9] == 3'd4);
assign builder_csrbank4_r_enable0_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank4_r_enable0_re <= 1'd0;
	builder_csrbank4_r_enable0_we <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank4_r_enable0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_r_enable0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_r_width0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_r_width0_re <= 1'd0;
	builder_csrbank4_r_width0_we <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank4_r_width0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_r_width0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_r_period0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_r_period0_we <= 1'd0;
	builder_csrbank4_r_period0_re <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank4_r_period0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_r_period0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_g_enable0_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank4_g_enable0_re <= 1'd0;
	builder_csrbank4_g_enable0_we <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank4_g_enable0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_g_enable0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_g_width0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_g_width0_we <= 1'd0;
	builder_csrbank4_g_width0_re <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank4_g_width0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_g_width0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_g_period0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_g_period0_we <= 1'd0;
	builder_csrbank4_g_period0_re <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank4_g_period0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_g_period0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_b_enable0_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank4_b_enable0_re <= 1'd0;
	builder_csrbank4_b_enable0_we <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank4_b_enable0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_b_enable0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_b_width0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_b_width0_we <= 1'd0;
	builder_csrbank4_b_width0_re <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank4_b_width0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_b_width0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_b_period0_r = builder_interface4_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank4_b_period0_re <= 1'd0;
	builder_csrbank4_b_period0_we <= 1'd0;
	if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csrbank4_b_period0_re <= builder_interface4_bank_bus_we;
		builder_csrbank4_b_period0_we <= (~builder_interface4_bank_bus_we);
	end
end
assign builder_csrbank4_r_enable0_w = basesoc_ledRGB_1_r_enable_storage;
assign builder_csrbank4_r_width0_w = basesoc_ledRGB_1_r_width_storage[31:0];
assign builder_csrbank4_r_period0_w = basesoc_ledRGB_1_r_period_storage[31:0];
assign builder_csrbank4_g_enable0_w = basesoc_ledRGB_1_g_enable_storage;
assign builder_csrbank4_g_width0_w = basesoc_ledRGB_1_g_width_storage[31:0];
assign builder_csrbank4_g_period0_w = basesoc_ledRGB_1_g_period_storage[31:0];
assign builder_csrbank4_b_enable0_w = basesoc_ledRGB_1_b_enable_storage;
assign builder_csrbank4_b_width0_w = basesoc_ledRGB_1_b_width_storage[31:0];
assign builder_csrbank4_b_period0_w = basesoc_ledRGB_1_b_period_storage[31:0];
assign builder_csrbank5_sel = (builder_interface5_bank_bus_adr[13:9] == 3'd5);
assign builder_csrbank5_r_enable0_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank5_r_enable0_re <= 1'd0;
	builder_csrbank5_r_enable0_we <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank5_r_enable0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_r_enable0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_r_width0_r = builder_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank5_r_width0_we <= 1'd0;
	builder_csrbank5_r_width0_re <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank5_r_width0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_r_width0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_r_period0_r = builder_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank5_r_period0_we <= 1'd0;
	builder_csrbank5_r_period0_re <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank5_r_period0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_r_period0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_g_enable0_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank5_g_enable0_re <= 1'd0;
	builder_csrbank5_g_enable0_we <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank5_g_enable0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_g_enable0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_g_width0_r = builder_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank5_g_width0_we <= 1'd0;
	builder_csrbank5_g_width0_re <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank5_g_width0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_g_width0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_g_period0_r = builder_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank5_g_period0_re <= 1'd0;
	builder_csrbank5_g_period0_we <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank5_g_period0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_g_period0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_b_enable0_r = builder_interface5_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank5_b_enable0_re <= 1'd0;
	builder_csrbank5_b_enable0_we <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank5_b_enable0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_b_enable0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_b_width0_r = builder_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank5_b_width0_we <= 1'd0;
	builder_csrbank5_b_width0_re <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank5_b_width0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_b_width0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_b_period0_r = builder_interface5_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank5_b_period0_re <= 1'd0;
	builder_csrbank5_b_period0_we <= 1'd0;
	if ((builder_csrbank5_sel & (builder_interface5_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csrbank5_b_period0_re <= builder_interface5_bank_bus_we;
		builder_csrbank5_b_period0_we <= (~builder_interface5_bank_bus_we);
	end
end
assign builder_csrbank5_r_enable0_w = basesoc_ledRGB_2_r_enable_storage;
assign builder_csrbank5_r_width0_w = basesoc_ledRGB_2_r_width_storage[31:0];
assign builder_csrbank5_r_period0_w = basesoc_ledRGB_2_r_period_storage[31:0];
assign builder_csrbank5_g_enable0_w = basesoc_ledRGB_2_g_enable_storage;
assign builder_csrbank5_g_width0_w = basesoc_ledRGB_2_g_width_storage[31:0];
assign builder_csrbank5_g_period0_w = basesoc_ledRGB_2_g_period_storage[31:0];
assign builder_csrbank5_b_enable0_w = basesoc_ledRGB_2_b_enable_storage;
assign builder_csrbank5_b_width0_w = basesoc_ledRGB_2_b_width_storage[31:0];
assign builder_csrbank5_b_period0_w = basesoc_ledRGB_2_b_period_storage[31:0];
assign builder_csrbank6_sel = (builder_interface6_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank6_out0_r = builder_interface6_bank_bus_dat_w[9:0];
always @(*) begin
	builder_csrbank6_out0_re <= 1'd0;
	builder_csrbank6_out0_we <= 1'd0;
	if ((builder_csrbank6_sel & (builder_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank6_out0_re <= builder_interface6_bank_bus_we;
		builder_csrbank6_out0_we <= (~builder_interface6_bank_bus_we);
	end
end
assign builder_csrbank6_out0_w = basesoc_leds_storage[9:0];
assign builder_csrbank7_sel = (builder_interface7_bank_bus_adr[13:9] == 4'd8);
assign builder_csrbank7_rst0_r = builder_interface7_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank7_rst0_re <= 1'd0;
	builder_csrbank7_rst0_we <= 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank7_rst0_re <= builder_interface7_bank_bus_we;
		builder_csrbank7_rst0_we <= (~builder_interface7_bank_bus_we);
	end
end
assign builder_csrbank7_pos0_r = builder_interface7_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank7_pos0_we <= 1'd0;
	builder_csrbank7_pos0_re <= 1'd0;
	if ((builder_csrbank7_sel & (builder_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank7_pos0_re <= builder_interface7_bank_bus_we;
		builder_csrbank7_pos0_we <= (~builder_interface7_bank_bus_we);
	end
end
assign builder_csrbank7_rst0_w = basesoc_rst_storage;
assign builder_csrbank7_pos0_w = basesoc_pos_storage[7:0];
assign builder_csrbank8_sel = (builder_interface8_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank8_in_r = builder_interface8_bank_bus_dat_w[7:0];
always @(*) begin
	builder_csrbank8_in_we <= 1'd0;
	builder_csrbank8_in_re <= 1'd0;
	if ((builder_csrbank8_sel & (builder_interface8_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank8_in_re <= builder_interface8_bank_bus_we;
		builder_csrbank8_in_we <= (~builder_interface8_bank_bus_we);
	end
end
assign builder_csrbank8_in_w = basesoc_switchs_status[7:0];
assign basesoc_switchs_we = builder_csrbank8_in_we;
assign builder_csrbank9_sel = (builder_interface9_bank_bus_adr[13:9] == 4'd11);
assign builder_csrbank9_load0_r = builder_interface9_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank9_load0_we <= 1'd0;
	builder_csrbank9_load0_re <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank9_load0_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_load0_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_reload0_r = builder_interface9_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank9_reload0_re <= 1'd0;
	builder_csrbank9_reload0_we <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank9_reload0_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_reload0_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_en0_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_en0_we <= 1'd0;
	builder_csrbank9_en0_re <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank9_en0_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_en0_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_update_value0_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_update_value0_we <= 1'd0;
	builder_csrbank9_update_value0_re <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank9_update_value0_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_update_value0_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_value_r = builder_interface9_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank9_value_re <= 1'd0;
	builder_csrbank9_value_we <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank9_value_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_value_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_ev_status_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_ev_status_we <= 1'd0;
	builder_csrbank9_ev_status_re <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank9_ev_status_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_ev_status_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_ev_pending_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_ev_pending_we <= 1'd0;
	builder_csrbank9_ev_pending_re <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank9_ev_pending_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_ev_pending_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_ev_enable0_r = builder_interface9_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank9_ev_enable0_re <= 1'd0;
	builder_csrbank9_ev_enable0_we <= 1'd0;
	if ((builder_csrbank9_sel & (builder_interface9_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank9_ev_enable0_re <= builder_interface9_bank_bus_we;
		builder_csrbank9_ev_enable0_we <= (~builder_interface9_bank_bus_we);
	end
end
assign builder_csrbank9_load0_w = basesoc_basesoc_timer_load_storage[31:0];
assign builder_csrbank9_reload0_w = basesoc_basesoc_timer_reload_storage[31:0];
assign builder_csrbank9_en0_w = basesoc_basesoc_timer_en_storage;
assign builder_csrbank9_update_value0_w = basesoc_basesoc_timer_update_value_storage;
assign builder_csrbank9_value_w = basesoc_basesoc_timer_value_status[31:0];
assign basesoc_basesoc_timer_value_we = builder_csrbank9_value_we;
assign basesoc_basesoc_timer_status_status = basesoc_basesoc_timer_zero0;
assign builder_csrbank9_ev_status_w = basesoc_basesoc_timer_status_status;
assign basesoc_basesoc_timer_status_we = builder_csrbank9_ev_status_we;
assign basesoc_basesoc_timer_pending_status = basesoc_basesoc_timer_zero1;
assign builder_csrbank9_ev_pending_w = basesoc_basesoc_timer_pending_status;
assign basesoc_basesoc_timer_pending_we = builder_csrbank9_ev_pending_we;
assign basesoc_basesoc_timer_zero2 = basesoc_basesoc_timer_enable_storage;
assign builder_csrbank9_ev_enable0_w = basesoc_basesoc_timer_enable_storage;
assign builder_csrbank10_sel = (builder_interface10_bank_bus_adr[13:9] == 4'd12);
assign basesoc_basesoc_uart_rxtx_r = builder_interface10_bank_bus_dat_w[7:0];
always @(*) begin
	basesoc_basesoc_uart_rxtx_we <= 1'd0;
	basesoc_basesoc_uart_rxtx_re <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_basesoc_uart_rxtx_re <= builder_interface10_bank_bus_we;
		basesoc_basesoc_uart_rxtx_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_txfull_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_txfull_re <= 1'd0;
	builder_csrbank10_txfull_we <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank10_txfull_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_txfull_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_rxempty_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_rxempty_we <= 1'd0;
	builder_csrbank10_rxempty_re <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank10_rxempty_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_rxempty_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_ev_status_r = builder_interface10_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank10_ev_status_we <= 1'd0;
	builder_csrbank10_ev_status_re <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank10_ev_status_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_ev_status_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_ev_pending_r = builder_interface10_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank10_ev_pending_re <= 1'd0;
	builder_csrbank10_ev_pending_we <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank10_ev_pending_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_ev_pending_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_ev_enable0_r = builder_interface10_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank10_ev_enable0_we <= 1'd0;
	builder_csrbank10_ev_enable0_re <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank10_ev_enable0_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_ev_enable0_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_txempty_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_txempty_we <= 1'd0;
	builder_csrbank10_txempty_re <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank10_txempty_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_txempty_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_rxfull_r = builder_interface10_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank10_rxfull_re <= 1'd0;
	builder_csrbank10_rxfull_we <= 1'd0;
	if ((builder_csrbank10_sel & (builder_interface10_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank10_rxfull_re <= builder_interface10_bank_bus_we;
		builder_csrbank10_rxfull_we <= (~builder_interface10_bank_bus_we);
	end
end
assign builder_csrbank10_txfull_w = basesoc_basesoc_uart_txfull_status;
assign basesoc_basesoc_uart_txfull_we = builder_csrbank10_txfull_we;
assign builder_csrbank10_rxempty_w = basesoc_basesoc_uart_rxempty_status;
assign basesoc_basesoc_uart_rxempty_we = builder_csrbank10_rxempty_we;
always @(*) begin
	basesoc_basesoc_uart_status_status <= 2'd0;
	basesoc_basesoc_uart_status_status[0] <= basesoc_basesoc_uart_tx0;
	basesoc_basesoc_uart_status_status[1] <= basesoc_basesoc_uart_rx0;
end
assign builder_csrbank10_ev_status_w = basesoc_basesoc_uart_status_status[1:0];
assign basesoc_basesoc_uart_status_we = builder_csrbank10_ev_status_we;
always @(*) begin
	basesoc_basesoc_uart_pending_status <= 2'd0;
	basesoc_basesoc_uart_pending_status[0] <= basesoc_basesoc_uart_tx1;
	basesoc_basesoc_uart_pending_status[1] <= basesoc_basesoc_uart_rx1;
end
assign builder_csrbank10_ev_pending_w = basesoc_basesoc_uart_pending_status[1:0];
assign basesoc_basesoc_uart_pending_we = builder_csrbank10_ev_pending_we;
assign basesoc_basesoc_uart_tx2 = basesoc_basesoc_uart_enable_storage[0];
assign basesoc_basesoc_uart_rx2 = basesoc_basesoc_uart_enable_storage[1];
assign builder_csrbank10_ev_enable0_w = basesoc_basesoc_uart_enable_storage[1:0];
assign builder_csrbank10_txempty_w = basesoc_basesoc_uart_txempty_status;
assign basesoc_basesoc_uart_txempty_we = builder_csrbank10_txempty_we;
assign builder_csrbank10_rxfull_w = basesoc_basesoc_uart_rxfull_status;
assign basesoc_basesoc_uart_rxfull_we = builder_csrbank10_rxfull_we;
assign builder_csrbank11_sel = (builder_interface11_bank_bus_adr[13:9] == 3'd7);
assign basesoc_rxtx_r = builder_interface11_bank_bus_dat_w[7:0];
always @(*) begin
	basesoc_rxtx_re <= 1'd0;
	basesoc_rxtx_we <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 1'd0))) begin
		basesoc_rxtx_re <= builder_interface11_bank_bus_we;
		basesoc_rxtx_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_txfull_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_txfull_re <= 1'd0;
	builder_csrbank11_txfull_we <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank11_txfull_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_txfull_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_rxempty_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_rxempty_we <= 1'd0;
	builder_csrbank11_rxempty_re <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank11_rxempty_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_rxempty_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_ev_status_r = builder_interface11_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank11_ev_status_we <= 1'd0;
	builder_csrbank11_ev_status_re <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank11_ev_status_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_ev_status_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_ev_pending_r = builder_interface11_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank11_ev_pending_re <= 1'd0;
	builder_csrbank11_ev_pending_we <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank11_ev_pending_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_ev_pending_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_ev_enable0_r = builder_interface11_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csrbank11_ev_enable0_re <= 1'd0;
	builder_csrbank11_ev_enable0_we <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank11_ev_enable0_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_ev_enable0_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_txempty_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_txempty_we <= 1'd0;
	builder_csrbank11_txempty_re <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank11_txempty_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_txempty_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_rxfull_r = builder_interface11_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank11_rxfull_re <= 1'd0;
	builder_csrbank11_rxfull_we <= 1'd0;
	if ((builder_csrbank11_sel & (builder_interface11_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank11_rxfull_re <= builder_interface11_bank_bus_we;
		builder_csrbank11_rxfull_we <= (~builder_interface11_bank_bus_we);
	end
end
assign builder_csrbank11_txfull_w = basesoc_txfull_status;
assign basesoc_txfull_we = builder_csrbank11_txfull_we;
assign builder_csrbank11_rxempty_w = basesoc_rxempty_status;
assign basesoc_rxempty_we = builder_csrbank11_rxempty_we;
always @(*) begin
	basesoc_status_status <= 2'd0;
	basesoc_status_status[0] <= basesoc_tx0;
	basesoc_status_status[1] <= basesoc_rx0;
end
assign builder_csrbank11_ev_status_w = basesoc_status_status[1:0];
assign basesoc_status_we = builder_csrbank11_ev_status_we;
always @(*) begin
	basesoc_pending_status <= 2'd0;
	basesoc_pending_status[0] <= basesoc_tx1;
	basesoc_pending_status[1] <= basesoc_rx1;
end
assign builder_csrbank11_ev_pending_w = basesoc_pending_status[1:0];
assign basesoc_pending_we = builder_csrbank11_ev_pending_we;
assign basesoc_tx2 = basesoc_enable_storage[0];
assign basesoc_rx2 = basesoc_enable_storage[1];
assign builder_csrbank11_ev_enable0_w = basesoc_enable_storage[1:0];
assign builder_csrbank11_txempty_w = basesoc_txempty_status;
assign basesoc_txempty_we = builder_csrbank11_txempty_we;
assign builder_csrbank11_rxfull_w = basesoc_rxfull_status;
assign basesoc_rxfull_we = builder_csrbank11_rxfull_we;
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface7_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface8_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface9_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface10_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface11_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface7_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface8_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface9_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface10_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface11_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface7_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface8_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface9_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface10_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface11_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((((((((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r) | builder_interface3_bank_bus_dat_r) | builder_interface4_bank_bus_dat_r) | builder_interface5_bank_bus_dat_r) | builder_interface6_bank_bus_dat_r) | builder_interface7_bank_bus_dat_r) | builder_interface8_bank_bus_dat_r) | builder_interface9_bank_bus_dat_r) | builder_interface10_bank_bus_dat_r) | builder_interface11_bank_bus_dat_r);
always @(*) begin
	builder_array_muxed0 <= 8'd0;
	case (basesoc_dgt_count)
		1'd0: begin
			builder_array_muxed0 <= basesoc_displays0;
		end
		1'd1: begin
			builder_array_muxed0 <= basesoc_displays1;
		end
		2'd2: begin
			builder_array_muxed0 <= basesoc_displays2;
		end
		2'd3: begin
			builder_array_muxed0 <= basesoc_displays3;
		end
		3'd4: begin
			builder_array_muxed0 <= basesoc_displays4;
		end
		3'd5: begin
			builder_array_muxed0 <= basesoc_displays5;
		end
		3'd6: begin
			builder_array_muxed0 <= basesoc_displays6;
		end
		default: begin
			builder_array_muxed0 <= basesoc_displays7;
		end
	endcase
end
always @(*) begin
	builder_array_muxed1 <= 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed1 <= basesoc_basesoc_ibus_adr;
		end
		default: begin
			builder_array_muxed1 <= basesoc_basesoc_dbus_adr;
		end
	endcase
end
always @(*) begin
	builder_array_muxed2 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed2 <= basesoc_basesoc_ibus_dat_w;
		end
		default: begin
			builder_array_muxed2 <= basesoc_basesoc_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	builder_array_muxed3 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed3 <= basesoc_basesoc_ibus_sel;
		end
		default: begin
			builder_array_muxed3 <= basesoc_basesoc_dbus_sel;
		end
	endcase
end
always @(*) begin
	builder_array_muxed4 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed4 <= basesoc_basesoc_ibus_cyc;
		end
		default: begin
			builder_array_muxed4 <= basesoc_basesoc_dbus_cyc;
		end
	endcase
end
always @(*) begin
	builder_array_muxed5 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed5 <= basesoc_basesoc_ibus_stb;
		end
		default: begin
			builder_array_muxed5 <= basesoc_basesoc_dbus_stb;
		end
	endcase
end
always @(*) begin
	builder_array_muxed6 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed6 <= basesoc_basesoc_ibus_we;
		end
		default: begin
			builder_array_muxed6 <= basesoc_basesoc_dbus_we;
		end
	endcase
end
always @(*) begin
	builder_array_muxed7 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed7 <= basesoc_basesoc_ibus_cti;
		end
		default: begin
			builder_array_muxed7 <= basesoc_basesoc_dbus_cti;
		end
	endcase
end
always @(*) begin
	builder_array_muxed8 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed8 <= basesoc_basesoc_ibus_bte;
		end
		default: begin
			builder_array_muxed8 <= basesoc_basesoc_dbus_bte;
		end
	endcase
end
assign basesoc_basesoc_rx_rx = builder_xilinxmultiregimpl0_regs1;
assign basesoc_switchs_status = builder_xilinxmultiregimpl1_regs1;
assign builder_xilinxmultiregimpl1 = {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
assign basesoc_buttons_status = builder_xilinxmultiregimpl2_regs1;
assign builder_xilinxmultiregimpl2 = {btnl, btnr, btnc};
assign basesoc_ledRGB_1_r_enable = basesoc_ledRGB_1_r_enable_storage;
assign basesoc_ledRGB_1_r_width = basesoc_ledRGB_1_r_width_storage;
assign basesoc_ledRGB_1_r_period = basesoc_ledRGB_1_r_period_storage;
assign basesoc_ledRGB_1_g_enable = basesoc_ledRGB_1_g_enable_storage;
assign basesoc_ledRGB_1_g_width = basesoc_ledRGB_1_g_width_storage;
assign basesoc_ledRGB_1_g_period = basesoc_ledRGB_1_g_period_storage;
assign basesoc_ledRGB_1_b_enable = basesoc_ledRGB_1_b_enable_storage;
assign basesoc_ledRGB_1_b_width = basesoc_ledRGB_1_b_width_storage;
assign basesoc_ledRGB_1_b_period = basesoc_ledRGB_1_b_period_storage;
assign basesoc_ledRGB_2_r_enable = basesoc_ledRGB_2_r_enable_storage;
assign basesoc_ledRGB_2_r_width = basesoc_ledRGB_2_r_width_storage;
assign basesoc_ledRGB_2_r_period = basesoc_ledRGB_2_r_period_storage;
assign basesoc_ledRGB_2_g_enable = basesoc_ledRGB_2_g_enable_storage;
assign basesoc_ledRGB_2_g_width = basesoc_ledRGB_2_g_width_storage;
assign basesoc_ledRGB_2_g_period = basesoc_ledRGB_2_g_period_storage;
assign basesoc_ledRGB_2_b_enable = basesoc_ledRGB_2_b_enable_storage;
assign basesoc_ledRGB_2_b_width = basesoc_ledRGB_2_b_width_storage;
assign basesoc_ledRGB_2_b_period = basesoc_ledRGB_2_b_period_storage;
assign basesoc_uart_wifi_phy_rx_rx = builder_xilinxmultiregimpl3_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	basesoc_int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((basesoc_basesoc_bus_errors != 32'd4294967295)) begin
		if (basesoc_basesoc_bus_error) begin
			basesoc_basesoc_bus_errors <= (basesoc_basesoc_bus_errors + 1'd1);
		end
	end
	basesoc_basesoc_ram_bus_ack <= 1'd0;
	if (((basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_ram_bus_stb) & (~basesoc_basesoc_ram_bus_ack))) begin
		basesoc_basesoc_ram_bus_ack <= 1'd1;
	end
	basesoc_basesoc_interface0_ram_bus_ack <= 1'd0;
	if (((basesoc_basesoc_interface0_ram_bus_cyc & basesoc_basesoc_interface0_ram_bus_stb) & (~basesoc_basesoc_interface0_ram_bus_ack))) begin
		basesoc_basesoc_interface0_ram_bus_ack <= 1'd1;
	end
	basesoc_basesoc_interface1_ram_bus_ack <= 1'd0;
	if (((basesoc_basesoc_interface1_ram_bus_cyc & basesoc_basesoc_interface1_ram_bus_stb) & (~basesoc_basesoc_interface1_ram_bus_ack))) begin
		basesoc_basesoc_interface1_ram_bus_ack <= 1'd1;
	end
	{basesoc_basesoc_tx_tick, basesoc_basesoc_tx_phase} <= 23'd4947802;
	if (basesoc_basesoc_tx_enable) begin
		{basesoc_basesoc_tx_tick, basesoc_basesoc_tx_phase} <= (basesoc_basesoc_tx_phase + 23'd4947802);
	end
	builder_rs232phytx0_state <= builder_rs232phytx0_next_state;
	if (basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0) begin
		basesoc_basesoc_tx_count <= basesoc_basesoc_tx_count_rs232phytx0_next_value0;
	end
	if (basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1) begin
		serial_tx <= basesoc_basesoc_serial_tx_rs232phytx0_next_value1;
	end
	if (basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2) begin
		basesoc_basesoc_tx_data <= basesoc_basesoc_tx_data_rs232phytx0_next_value2;
	end
	basesoc_basesoc_rx_rx_d <= basesoc_basesoc_rx_rx;
	{basesoc_basesoc_rx_tick, basesoc_basesoc_rx_phase} <= 32'd2147483648;
	if (basesoc_basesoc_rx_enable) begin
		{basesoc_basesoc_rx_tick, basesoc_basesoc_rx_phase} <= (basesoc_basesoc_rx_phase + 23'd4947802);
	end
	builder_rs232phyrx0_state <= builder_rs232phyrx0_next_state;
	if (basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0) begin
		basesoc_basesoc_rx_count <= basesoc_basesoc_rx_count_rs232phyrx0_next_value0;
	end
	if (basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1) begin
		basesoc_basesoc_rx_data <= basesoc_basesoc_rx_data_rs232phyrx0_next_value1;
	end
	if (basesoc_basesoc_uart_tx_clear) begin
		basesoc_basesoc_uart_tx_pending <= 1'd0;
	end
	basesoc_basesoc_uart_tx_trigger_d <= basesoc_basesoc_uart_tx_trigger;
	if ((basesoc_basesoc_uart_tx_trigger & (~basesoc_basesoc_uart_tx_trigger_d))) begin
		basesoc_basesoc_uart_tx_pending <= 1'd1;
	end
	if (basesoc_basesoc_uart_rx_clear) begin
		basesoc_basesoc_uart_rx_pending <= 1'd0;
	end
	basesoc_basesoc_uart_rx_trigger_d <= basesoc_basesoc_uart_rx_trigger;
	if ((basesoc_basesoc_uart_rx_trigger & (~basesoc_basesoc_uart_rx_trigger_d))) begin
		basesoc_basesoc_uart_rx_pending <= 1'd1;
	end
	if (basesoc_basesoc_uart_tx_fifo_syncfifo_re) begin
		basesoc_basesoc_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (basesoc_basesoc_uart_tx_fifo_re) begin
			basesoc_basesoc_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((basesoc_basesoc_uart_tx_fifo_syncfifo_we & basesoc_basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_basesoc_uart_tx_fifo_replace))) begin
		basesoc_basesoc_uart_tx_fifo_produce <= (basesoc_basesoc_uart_tx_fifo_produce + 1'd1);
	end
	if (basesoc_basesoc_uart_tx_fifo_do_read) begin
		basesoc_basesoc_uart_tx_fifo_consume <= (basesoc_basesoc_uart_tx_fifo_consume + 1'd1);
	end
	if (((basesoc_basesoc_uart_tx_fifo_syncfifo_we & basesoc_basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_basesoc_uart_tx_fifo_replace))) begin
		if ((~basesoc_basesoc_uart_tx_fifo_do_read)) begin
			basesoc_basesoc_uart_tx_fifo_level0 <= (basesoc_basesoc_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (basesoc_basesoc_uart_tx_fifo_do_read) begin
			basesoc_basesoc_uart_tx_fifo_level0 <= (basesoc_basesoc_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (basesoc_basesoc_uart_rx_fifo_syncfifo_re) begin
		basesoc_basesoc_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (basesoc_basesoc_uart_rx_fifo_re) begin
			basesoc_basesoc_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((basesoc_basesoc_uart_rx_fifo_syncfifo_we & basesoc_basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_basesoc_uart_rx_fifo_replace))) begin
		basesoc_basesoc_uart_rx_fifo_produce <= (basesoc_basesoc_uart_rx_fifo_produce + 1'd1);
	end
	if (basesoc_basesoc_uart_rx_fifo_do_read) begin
		basesoc_basesoc_uart_rx_fifo_consume <= (basesoc_basesoc_uart_rx_fifo_consume + 1'd1);
	end
	if (((basesoc_basesoc_uart_rx_fifo_syncfifo_we & basesoc_basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_basesoc_uart_rx_fifo_replace))) begin
		if ((~basesoc_basesoc_uart_rx_fifo_do_read)) begin
			basesoc_basesoc_uart_rx_fifo_level0 <= (basesoc_basesoc_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (basesoc_basesoc_uart_rx_fifo_do_read) begin
			basesoc_basesoc_uart_rx_fifo_level0 <= (basesoc_basesoc_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (basesoc_basesoc_timer_en_storage) begin
		if ((basesoc_basesoc_timer_value == 1'd0)) begin
			basesoc_basesoc_timer_value <= basesoc_basesoc_timer_reload_storage;
		end else begin
			basesoc_basesoc_timer_value <= (basesoc_basesoc_timer_value - 1'd1);
		end
	end else begin
		basesoc_basesoc_timer_value <= basesoc_basesoc_timer_load_storage;
	end
	if (basesoc_basesoc_timer_update_value_re) begin
		basesoc_basesoc_timer_value_status <= basesoc_basesoc_timer_value;
	end
	if (basesoc_basesoc_timer_zero_clear) begin
		basesoc_basesoc_timer_zero_pending <= 1'd0;
	end
	basesoc_basesoc_timer_zero_trigger_d <= basesoc_basesoc_timer_zero_trigger;
	if ((basesoc_basesoc_timer_zero_trigger & (~basesoc_basesoc_timer_zero_trigger_d))) begin
		basesoc_basesoc_timer_zero_pending <= 1'd1;
	end
	if ((basesoc_dgt_tick_count >= 18'd199999)) begin
		basesoc_dgt_tick_count <= 1'd0;
		basesoc_dgt_tick <= 1'd1;
	end else begin
		basesoc_dgt_tick_count <= (basesoc_dgt_tick_count + 1'd1);
		basesoc_dgt_tick <= 1'd0;
	end
	if (basesoc_dgt_tick) begin
		if ((basesoc_dgt_count >= 3'd7)) begin
			basesoc_dgt_count <= 1'd0;
		end else begin
			basesoc_dgt_count <= (basesoc_dgt_count + 1'd1);
		end
	end
	if (basesoc_ledRGB_1_r_enable) begin
		basesoc_ledRGB_1_r_counter <= (basesoc_ledRGB_1_r_counter + 1'd1);
		if ((basesoc_ledRGB_1_r_counter < basesoc_ledRGB_1_r_width)) begin
			ledRGB1_r <= 1'd1;
		end else begin
			ledRGB1_r <= 1'd0;
		end
		if ((basesoc_ledRGB_1_r_counter >= (basesoc_ledRGB_1_r_period - 1'd1))) begin
			basesoc_ledRGB_1_r_counter <= 1'd0;
		end
	end else begin
		basesoc_ledRGB_1_r_counter <= 1'd0;
		ledRGB1_r <= 1'd0;
	end
	if (basesoc_ledRGB_1_g_enable) begin
		basesoc_ledRGB_1_g_counter <= (basesoc_ledRGB_1_g_counter + 1'd1);
		if ((basesoc_ledRGB_1_g_counter < basesoc_ledRGB_1_g_width)) begin
			ledRGB1_g <= 1'd1;
		end else begin
			ledRGB1_g <= 1'd0;
		end
		if ((basesoc_ledRGB_1_g_counter >= (basesoc_ledRGB_1_g_period - 1'd1))) begin
			basesoc_ledRGB_1_g_counter <= 1'd0;
		end
	end else begin
		basesoc_ledRGB_1_g_counter <= 1'd0;
		ledRGB1_g <= 1'd0;
	end
	if (basesoc_ledRGB_1_b_enable) begin
		basesoc_ledRGB_1_b_counter <= (basesoc_ledRGB_1_b_counter + 1'd1);
		if ((basesoc_ledRGB_1_b_counter < basesoc_ledRGB_1_b_width)) begin
			ledRGB1_b <= 1'd1;
		end else begin
			ledRGB1_b <= 1'd0;
		end
		if ((basesoc_ledRGB_1_b_counter >= (basesoc_ledRGB_1_b_period - 1'd1))) begin
			basesoc_ledRGB_1_b_counter <= 1'd0;
		end
	end else begin
		basesoc_ledRGB_1_b_counter <= 1'd0;
		ledRGB1_b <= 1'd0;
	end
	if (basesoc_ledRGB_2_r_enable) begin
		basesoc_ledRGB_2_r_counter <= (basesoc_ledRGB_2_r_counter + 1'd1);
		if ((basesoc_ledRGB_2_r_counter < basesoc_ledRGB_2_r_width)) begin
			ledRGB2_r <= 1'd1;
		end else begin
			ledRGB2_r <= 1'd0;
		end
		if ((basesoc_ledRGB_2_r_counter >= (basesoc_ledRGB_2_r_period - 1'd1))) begin
			basesoc_ledRGB_2_r_counter <= 1'd0;
		end
	end else begin
		basesoc_ledRGB_2_r_counter <= 1'd0;
		ledRGB2_r <= 1'd0;
	end
	if (basesoc_ledRGB_2_g_enable) begin
		basesoc_ledRGB_2_g_counter <= (basesoc_ledRGB_2_g_counter + 1'd1);
		if ((basesoc_ledRGB_2_g_counter < basesoc_ledRGB_2_g_width)) begin
			ledRGB2_g <= 1'd1;
		end else begin
			ledRGB2_g <= 1'd0;
		end
		if ((basesoc_ledRGB_2_g_counter >= (basesoc_ledRGB_2_g_period - 1'd1))) begin
			basesoc_ledRGB_2_g_counter <= 1'd0;
		end
	end else begin
		basesoc_ledRGB_2_g_counter <= 1'd0;
		ledRGB2_g <= 1'd0;
	end
	if (basesoc_ledRGB_2_b_enable) begin
		basesoc_ledRGB_2_b_counter <= (basesoc_ledRGB_2_b_counter + 1'd1);
		if ((basesoc_ledRGB_2_b_counter < basesoc_ledRGB_2_b_width)) begin
			ledRGB2_b <= 1'd1;
		end else begin
			ledRGB2_b <= 1'd0;
		end
		if ((basesoc_ledRGB_2_b_counter >= (basesoc_ledRGB_2_b_period - 1'd1))) begin
			basesoc_ledRGB_2_b_counter <= 1'd0;
		end
	end else begin
		basesoc_ledRGB_2_b_counter <= 1'd0;
		ledRGB2_b <= 1'd0;
	end
	{basesoc_uart_wifi_phy_tx_tick, basesoc_uart_wifi_phy_tx_phase} <= 19'd412316;
	if (basesoc_uart_wifi_phy_tx_enable) begin
		{basesoc_uart_wifi_phy_tx_tick, basesoc_uart_wifi_phy_tx_phase} <= (basesoc_uart_wifi_phy_tx_phase + 19'd412316);
	end
	builder_rs232phytx1_state <= builder_rs232phytx1_next_state;
	if (basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value_ce0) begin
		basesoc_uart_wifi_phy_tx_count <= basesoc_uart_wifi_phy_tx_count_rs232phytx1_next_value0;
	end
	if (basesoc_obj_uart_wifi_tx_rs232phytx1_next_value_ce1) begin
		uart_wifi_tx <= basesoc_obj_uart_wifi_tx_rs232phytx1_next_value1;
	end
	if (basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value_ce2) begin
		basesoc_uart_wifi_phy_tx_data <= basesoc_uart_wifi_phy_tx_data_rs232phytx1_next_value2;
	end
	basesoc_uart_wifi_phy_rx_rx_d <= basesoc_uart_wifi_phy_rx_rx;
	{basesoc_uart_wifi_phy_rx_tick, basesoc_uart_wifi_phy_rx_phase} <= 32'd2147483648;
	if (basesoc_uart_wifi_phy_rx_enable) begin
		{basesoc_uart_wifi_phy_rx_tick, basesoc_uart_wifi_phy_rx_phase} <= (basesoc_uart_wifi_phy_rx_phase + 19'd412316);
	end
	builder_rs232phyrx1_state <= builder_rs232phyrx1_next_state;
	if (basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value_ce0) begin
		basesoc_uart_wifi_phy_rx_count <= basesoc_uart_wifi_phy_rx_count_rs232phyrx1_next_value0;
	end
	if (basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value_ce1) begin
		basesoc_uart_wifi_phy_rx_data <= basesoc_uart_wifi_phy_rx_data_rs232phyrx1_next_value1;
	end
	if (basesoc_tx_clear) begin
		basesoc_tx_pending <= 1'd0;
	end
	basesoc_tx_trigger_d <= basesoc_tx_trigger;
	if ((basesoc_tx_trigger & (~basesoc_tx_trigger_d))) begin
		basesoc_tx_pending <= 1'd1;
	end
	if (basesoc_rx_clear) begin
		basesoc_rx_pending <= 1'd0;
	end
	basesoc_rx_trigger_d <= basesoc_rx_trigger;
	if ((basesoc_rx_trigger & (~basesoc_rx_trigger_d))) begin
		basesoc_rx_pending <= 1'd1;
	end
	if (basesoc_tx_fifo_syncfifo_re) begin
		basesoc_tx_fifo_readable <= 1'd1;
	end else begin
		if (basesoc_tx_fifo_re) begin
			basesoc_tx_fifo_readable <= 1'd0;
		end
	end
	if (((basesoc_tx_fifo_syncfifo_we & basesoc_tx_fifo_syncfifo_writable) & (~basesoc_tx_fifo_replace))) begin
		basesoc_tx_fifo_produce <= (basesoc_tx_fifo_produce + 1'd1);
	end
	if (basesoc_tx_fifo_do_read) begin
		basesoc_tx_fifo_consume <= (basesoc_tx_fifo_consume + 1'd1);
	end
	if (((basesoc_tx_fifo_syncfifo_we & basesoc_tx_fifo_syncfifo_writable) & (~basesoc_tx_fifo_replace))) begin
		if ((~basesoc_tx_fifo_do_read)) begin
			basesoc_tx_fifo_level0 <= (basesoc_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (basesoc_tx_fifo_do_read) begin
			basesoc_tx_fifo_level0 <= (basesoc_tx_fifo_level0 - 1'd1);
		end
	end
	if (basesoc_rx_fifo_syncfifo_re) begin
		basesoc_rx_fifo_readable <= 1'd1;
	end else begin
		if (basesoc_rx_fifo_re) begin
			basesoc_rx_fifo_readable <= 1'd0;
		end
	end
	if (((basesoc_rx_fifo_syncfifo_we & basesoc_rx_fifo_syncfifo_writable) & (~basesoc_rx_fifo_replace))) begin
		basesoc_rx_fifo_produce <= (basesoc_rx_fifo_produce + 1'd1);
	end
	if (basesoc_rx_fifo_do_read) begin
		basesoc_rx_fifo_consume <= (basesoc_rx_fifo_consume + 1'd1);
	end
	if (((basesoc_rx_fifo_syncfifo_we & basesoc_rx_fifo_syncfifo_writable) & (~basesoc_rx_fifo_replace))) begin
		if ((~basesoc_rx_fifo_do_read)) begin
			basesoc_rx_fifo_level0 <= (basesoc_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (basesoc_rx_fifo_do_read) begin
			basesoc_rx_fifo_level0 <= (basesoc_rx_fifo_level0 - 1'd1);
		end
	end
	if (basesoc_uart_wifi_reset) begin
		basesoc_tx_pending <= 1'd0;
		basesoc_tx_trigger_d <= 1'd0;
		basesoc_rx_pending <= 1'd0;
		basesoc_rx_trigger_d <= 1'd0;
		basesoc_tx_fifo_readable <= 1'd0;
		basesoc_tx_fifo_level0 <= 5'd0;
		basesoc_tx_fifo_produce <= 4'd0;
		basesoc_tx_fifo_consume <= 4'd0;
		basesoc_rx_fifo_readable <= 1'd0;
		basesoc_rx_fifo_level0 <= 5'd0;
		basesoc_rx_fifo_produce <= 4'd0;
		basesoc_rx_fifo_consume <= 4'd0;
	end
	builder_state <= builder_next_state;
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank0_sel) begin
		case (builder_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface0_bank_bus_dat_r <= builder_csrbank0_in_w;
			end
		endcase
	end
	basesoc_buttons_re <= builder_csrbank0_in_re;
	builder_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank1_sel) begin
		case (builder_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_reset0_w;
			end
			1'd1: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_scratch0_w;
			end
			2'd2: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_bus_errors_w;
			end
		endcase
	end
	if (builder_csrbank1_reset0_re) begin
		basesoc_basesoc_reset_storage[1:0] <= builder_csrbank1_reset0_r;
	end
	basesoc_basesoc_reset_re <= builder_csrbank1_reset0_re;
	if (builder_csrbank1_scratch0_re) begin
		basesoc_basesoc_scratch_storage[31:0] <= builder_csrbank1_scratch0_r;
	end
	basesoc_basesoc_scratch_re <= builder_csrbank1_scratch0_re;
	basesoc_basesoc_bus_errors_re <= builder_csrbank1_bus_errors_re;
	builder_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank2_sel) begin
		case (builder_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_00_w;
			end
			1'd1: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_10_w;
			end
			2'd2: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_20_w;
			end
			2'd3: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_30_w;
			end
			3'd4: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_40_w;
			end
			3'd5: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_50_w;
			end
			3'd6: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_60_w;
			end
			3'd7: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_dig_70_w;
			end
		endcase
	end
	if (builder_csrbank2_dig_00_re) begin
		basesoc_dig_0_storage[7:0] <= builder_csrbank2_dig_00_r;
	end
	basesoc_dig_0_re <= builder_csrbank2_dig_00_re;
	if (builder_csrbank2_dig_10_re) begin
		basesoc_dig_1_storage[7:0] <= builder_csrbank2_dig_10_r;
	end
	basesoc_dig_1_re <= builder_csrbank2_dig_10_re;
	if (builder_csrbank2_dig_20_re) begin
		basesoc_dig_2_storage[7:0] <= builder_csrbank2_dig_20_r;
	end
	basesoc_dig_2_re <= builder_csrbank2_dig_20_re;
	if (builder_csrbank2_dig_30_re) begin
		basesoc_dig_3_storage[7:0] <= builder_csrbank2_dig_30_r;
	end
	basesoc_dig_3_re <= builder_csrbank2_dig_30_re;
	if (builder_csrbank2_dig_40_re) begin
		basesoc_dig_4_storage[7:0] <= builder_csrbank2_dig_40_r;
	end
	basesoc_dig_4_re <= builder_csrbank2_dig_40_re;
	if (builder_csrbank2_dig_50_re) begin
		basesoc_dig_5_storage[7:0] <= builder_csrbank2_dig_50_r;
	end
	basesoc_dig_5_re <= builder_csrbank2_dig_50_re;
	if (builder_csrbank2_dig_60_re) begin
		basesoc_dig_6_storage[7:0] <= builder_csrbank2_dig_60_r;
	end
	basesoc_dig_6_re <= builder_csrbank2_dig_60_re;
	if (builder_csrbank2_dig_70_re) begin
		basesoc_dig_7_storage[7:0] <= builder_csrbank2_dig_70_r;
	end
	basesoc_dig_7_re <= builder_csrbank2_dig_70_re;
	builder_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank3_sel) begin
		case (builder_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_w0_w;
			end
			1'd1: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_r_w;
			end
		endcase
	end
	if (builder_csrbank3_w0_re) begin
		basesoc__w_storage[2:0] <= builder_csrbank3_w0_r;
	end
	basesoc__w_re <= builder_csrbank3_w0_re;
	basesoc__r_re <= builder_csrbank3_r_re;
	builder_interface4_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank4_sel) begin
		case (builder_interface4_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_r_enable0_w;
			end
			1'd1: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_r_width0_w;
			end
			2'd2: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_r_period0_w;
			end
			2'd3: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_g_enable0_w;
			end
			3'd4: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_g_width0_w;
			end
			3'd5: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_g_period0_w;
			end
			3'd6: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_b_enable0_w;
			end
			3'd7: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_b_width0_w;
			end
			4'd8: begin
				builder_interface4_bank_bus_dat_r <= builder_csrbank4_b_period0_w;
			end
		endcase
	end
	if (builder_csrbank4_r_enable0_re) begin
		basesoc_ledRGB_1_r_enable_storage <= builder_csrbank4_r_enable0_r;
	end
	basesoc_ledRGB_1_r_enable_re <= builder_csrbank4_r_enable0_re;
	if (builder_csrbank4_r_width0_re) begin
		basesoc_ledRGB_1_r_width_storage[31:0] <= builder_csrbank4_r_width0_r;
	end
	basesoc_ledRGB_1_r_width_re <= builder_csrbank4_r_width0_re;
	if (builder_csrbank4_r_period0_re) begin
		basesoc_ledRGB_1_r_period_storage[31:0] <= builder_csrbank4_r_period0_r;
	end
	basesoc_ledRGB_1_r_period_re <= builder_csrbank4_r_period0_re;
	if (builder_csrbank4_g_enable0_re) begin
		basesoc_ledRGB_1_g_enable_storage <= builder_csrbank4_g_enable0_r;
	end
	basesoc_ledRGB_1_g_enable_re <= builder_csrbank4_g_enable0_re;
	if (builder_csrbank4_g_width0_re) begin
		basesoc_ledRGB_1_g_width_storage[31:0] <= builder_csrbank4_g_width0_r;
	end
	basesoc_ledRGB_1_g_width_re <= builder_csrbank4_g_width0_re;
	if (builder_csrbank4_g_period0_re) begin
		basesoc_ledRGB_1_g_period_storage[31:0] <= builder_csrbank4_g_period0_r;
	end
	basesoc_ledRGB_1_g_period_re <= builder_csrbank4_g_period0_re;
	if (builder_csrbank4_b_enable0_re) begin
		basesoc_ledRGB_1_b_enable_storage <= builder_csrbank4_b_enable0_r;
	end
	basesoc_ledRGB_1_b_enable_re <= builder_csrbank4_b_enable0_re;
	if (builder_csrbank4_b_width0_re) begin
		basesoc_ledRGB_1_b_width_storage[31:0] <= builder_csrbank4_b_width0_r;
	end
	basesoc_ledRGB_1_b_width_re <= builder_csrbank4_b_width0_re;
	if (builder_csrbank4_b_period0_re) begin
		basesoc_ledRGB_1_b_period_storage[31:0] <= builder_csrbank4_b_period0_r;
	end
	basesoc_ledRGB_1_b_period_re <= builder_csrbank4_b_period0_re;
	builder_interface5_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank5_sel) begin
		case (builder_interface5_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_r_enable0_w;
			end
			1'd1: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_r_width0_w;
			end
			2'd2: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_r_period0_w;
			end
			2'd3: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_g_enable0_w;
			end
			3'd4: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_g_width0_w;
			end
			3'd5: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_g_period0_w;
			end
			3'd6: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_b_enable0_w;
			end
			3'd7: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_b_width0_w;
			end
			4'd8: begin
				builder_interface5_bank_bus_dat_r <= builder_csrbank5_b_period0_w;
			end
		endcase
	end
	if (builder_csrbank5_r_enable0_re) begin
		basesoc_ledRGB_2_r_enable_storage <= builder_csrbank5_r_enable0_r;
	end
	basesoc_ledRGB_2_r_enable_re <= builder_csrbank5_r_enable0_re;
	if (builder_csrbank5_r_width0_re) begin
		basesoc_ledRGB_2_r_width_storage[31:0] <= builder_csrbank5_r_width0_r;
	end
	basesoc_ledRGB_2_r_width_re <= builder_csrbank5_r_width0_re;
	if (builder_csrbank5_r_period0_re) begin
		basesoc_ledRGB_2_r_period_storage[31:0] <= builder_csrbank5_r_period0_r;
	end
	basesoc_ledRGB_2_r_period_re <= builder_csrbank5_r_period0_re;
	if (builder_csrbank5_g_enable0_re) begin
		basesoc_ledRGB_2_g_enable_storage <= builder_csrbank5_g_enable0_r;
	end
	basesoc_ledRGB_2_g_enable_re <= builder_csrbank5_g_enable0_re;
	if (builder_csrbank5_g_width0_re) begin
		basesoc_ledRGB_2_g_width_storage[31:0] <= builder_csrbank5_g_width0_r;
	end
	basesoc_ledRGB_2_g_width_re <= builder_csrbank5_g_width0_re;
	if (builder_csrbank5_g_period0_re) begin
		basesoc_ledRGB_2_g_period_storage[31:0] <= builder_csrbank5_g_period0_r;
	end
	basesoc_ledRGB_2_g_period_re <= builder_csrbank5_g_period0_re;
	if (builder_csrbank5_b_enable0_re) begin
		basesoc_ledRGB_2_b_enable_storage <= builder_csrbank5_b_enable0_r;
	end
	basesoc_ledRGB_2_b_enable_re <= builder_csrbank5_b_enable0_re;
	if (builder_csrbank5_b_width0_re) begin
		basesoc_ledRGB_2_b_width_storage[31:0] <= builder_csrbank5_b_width0_r;
	end
	basesoc_ledRGB_2_b_width_re <= builder_csrbank5_b_width0_re;
	if (builder_csrbank5_b_period0_re) begin
		basesoc_ledRGB_2_b_period_storage[31:0] <= builder_csrbank5_b_period0_r;
	end
	basesoc_ledRGB_2_b_period_re <= builder_csrbank5_b_period0_re;
	builder_interface6_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank6_sel) begin
		case (builder_interface6_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface6_bank_bus_dat_r <= builder_csrbank6_out0_w;
			end
		endcase
	end
	if (builder_csrbank6_out0_re) begin
		basesoc_leds_storage[9:0] <= builder_csrbank6_out0_r;
	end
	basesoc_leds_re <= builder_csrbank6_out0_re;
	builder_interface7_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank7_sel) begin
		case (builder_interface7_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_rst0_w;
			end
			1'd1: begin
				builder_interface7_bank_bus_dat_r <= builder_csrbank7_pos0_w;
			end
		endcase
	end
	if (builder_csrbank7_rst0_re) begin
		basesoc_rst_storage <= builder_csrbank7_rst0_r;
	end
	basesoc_rst_re <= builder_csrbank7_rst0_re;
	if (builder_csrbank7_pos0_re) begin
		basesoc_pos_storage[7:0] <= builder_csrbank7_pos0_r;
	end
	basesoc_pos_re <= builder_csrbank7_pos0_re;
	builder_interface8_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank8_sel) begin
		case (builder_interface8_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface8_bank_bus_dat_r <= builder_csrbank8_in_w;
			end
		endcase
	end
	basesoc_switchs_re <= builder_csrbank8_in_re;
	builder_interface9_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank9_sel) begin
		case (builder_interface9_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_load0_w;
			end
			1'd1: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_reload0_w;
			end
			2'd2: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_en0_w;
			end
			2'd3: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_update_value0_w;
			end
			3'd4: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_value_w;
			end
			3'd5: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_ev_status_w;
			end
			3'd6: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_ev_pending_w;
			end
			3'd7: begin
				builder_interface9_bank_bus_dat_r <= builder_csrbank9_ev_enable0_w;
			end
		endcase
	end
	if (builder_csrbank9_load0_re) begin
		basesoc_basesoc_timer_load_storage[31:0] <= builder_csrbank9_load0_r;
	end
	basesoc_basesoc_timer_load_re <= builder_csrbank9_load0_re;
	if (builder_csrbank9_reload0_re) begin
		basesoc_basesoc_timer_reload_storage[31:0] <= builder_csrbank9_reload0_r;
	end
	basesoc_basesoc_timer_reload_re <= builder_csrbank9_reload0_re;
	if (builder_csrbank9_en0_re) begin
		basesoc_basesoc_timer_en_storage <= builder_csrbank9_en0_r;
	end
	basesoc_basesoc_timer_en_re <= builder_csrbank9_en0_re;
	if (builder_csrbank9_update_value0_re) begin
		basesoc_basesoc_timer_update_value_storage <= builder_csrbank9_update_value0_r;
	end
	basesoc_basesoc_timer_update_value_re <= builder_csrbank9_update_value0_re;
	basesoc_basesoc_timer_value_re <= builder_csrbank9_value_re;
	basesoc_basesoc_timer_status_re <= builder_csrbank9_ev_status_re;
	if (builder_csrbank9_ev_pending_re) begin
		basesoc_basesoc_timer_pending_r <= builder_csrbank9_ev_pending_r;
	end
	basesoc_basesoc_timer_pending_re <= builder_csrbank9_ev_pending_re;
	if (builder_csrbank9_ev_enable0_re) begin
		basesoc_basesoc_timer_enable_storage <= builder_csrbank9_ev_enable0_r;
	end
	basesoc_basesoc_timer_enable_re <= builder_csrbank9_ev_enable0_re;
	builder_interface10_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank10_sel) begin
		case (builder_interface10_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface10_bank_bus_dat_r <= basesoc_basesoc_uart_rxtx_w;
			end
			1'd1: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_txfull_w;
			end
			2'd2: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_rxempty_w;
			end
			2'd3: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_ev_status_w;
			end
			3'd4: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_ev_pending_w;
			end
			3'd5: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_ev_enable0_w;
			end
			3'd6: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_txempty_w;
			end
			3'd7: begin
				builder_interface10_bank_bus_dat_r <= builder_csrbank10_rxfull_w;
			end
		endcase
	end
	basesoc_basesoc_uart_txfull_re <= builder_csrbank10_txfull_re;
	basesoc_basesoc_uart_rxempty_re <= builder_csrbank10_rxempty_re;
	basesoc_basesoc_uart_status_re <= builder_csrbank10_ev_status_re;
	if (builder_csrbank10_ev_pending_re) begin
		basesoc_basesoc_uart_pending_r[1:0] <= builder_csrbank10_ev_pending_r;
	end
	basesoc_basesoc_uart_pending_re <= builder_csrbank10_ev_pending_re;
	if (builder_csrbank10_ev_enable0_re) begin
		basesoc_basesoc_uart_enable_storage[1:0] <= builder_csrbank10_ev_enable0_r;
	end
	basesoc_basesoc_uart_enable_re <= builder_csrbank10_ev_enable0_re;
	basesoc_basesoc_uart_txempty_re <= builder_csrbank10_txempty_re;
	basesoc_basesoc_uart_rxfull_re <= builder_csrbank10_rxfull_re;
	builder_interface11_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank11_sel) begin
		case (builder_interface11_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface11_bank_bus_dat_r <= basesoc_rxtx_w;
			end
			1'd1: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_txfull_w;
			end
			2'd2: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_rxempty_w;
			end
			2'd3: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_ev_status_w;
			end
			3'd4: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_ev_pending_w;
			end
			3'd5: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_ev_enable0_w;
			end
			3'd6: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_txempty_w;
			end
			3'd7: begin
				builder_interface11_bank_bus_dat_r <= builder_csrbank11_rxfull_w;
			end
		endcase
	end
	basesoc_txfull_re <= builder_csrbank11_txfull_re;
	basesoc_rxempty_re <= builder_csrbank11_rxempty_re;
	basesoc_status_re <= builder_csrbank11_ev_status_re;
	if (builder_csrbank11_ev_pending_re) begin
		basesoc_pending_r[1:0] <= builder_csrbank11_ev_pending_r;
	end
	basesoc_pending_re <= builder_csrbank11_ev_pending_re;
	if (builder_csrbank11_ev_enable0_re) begin
		basesoc_enable_storage[1:0] <= builder_csrbank11_ev_enable0_r;
	end
	basesoc_enable_re <= builder_csrbank11_ev_enable0_re;
	basesoc_txempty_re <= builder_csrbank11_txempty_re;
	basesoc_rxfull_re <= builder_csrbank11_rxfull_re;
	if (sys_rst) begin
		basesoc_basesoc_reset_storage <= 2'd0;
		basesoc_basesoc_reset_re <= 1'd0;
		basesoc_basesoc_scratch_storage <= 32'd305419896;
		basesoc_basesoc_scratch_re <= 1'd0;
		basesoc_basesoc_bus_errors_re <= 1'd0;
		basesoc_basesoc_bus_errors <= 32'd0;
		basesoc_basesoc_ram_bus_ack <= 1'd0;
		basesoc_basesoc_interface0_ram_bus_ack <= 1'd0;
		basesoc_basesoc_interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		basesoc_basesoc_tx_tick <= 1'd0;
		basesoc_basesoc_rx_tick <= 1'd0;
		basesoc_basesoc_rx_rx_d <= 1'd0;
		basesoc_basesoc_uart_txfull_re <= 1'd0;
		basesoc_basesoc_uart_rxempty_re <= 1'd0;
		basesoc_basesoc_uart_tx_pending <= 1'd0;
		basesoc_basesoc_uart_tx_trigger_d <= 1'd0;
		basesoc_basesoc_uart_rx_pending <= 1'd0;
		basesoc_basesoc_uart_rx_trigger_d <= 1'd0;
		basesoc_basesoc_uart_status_re <= 1'd0;
		basesoc_basesoc_uart_pending_re <= 1'd0;
		basesoc_basesoc_uart_pending_r <= 2'd0;
		basesoc_basesoc_uart_enable_storage <= 2'd0;
		basesoc_basesoc_uart_enable_re <= 1'd0;
		basesoc_basesoc_uart_txempty_re <= 1'd0;
		basesoc_basesoc_uart_rxfull_re <= 1'd0;
		basesoc_basesoc_uart_tx_fifo_readable <= 1'd0;
		basesoc_basesoc_uart_tx_fifo_level0 <= 5'd0;
		basesoc_basesoc_uart_tx_fifo_produce <= 4'd0;
		basesoc_basesoc_uart_tx_fifo_consume <= 4'd0;
		basesoc_basesoc_uart_rx_fifo_readable <= 1'd0;
		basesoc_basesoc_uart_rx_fifo_level0 <= 5'd0;
		basesoc_basesoc_uart_rx_fifo_produce <= 4'd0;
		basesoc_basesoc_uart_rx_fifo_consume <= 4'd0;
		basesoc_basesoc_timer_load_storage <= 32'd0;
		basesoc_basesoc_timer_load_re <= 1'd0;
		basesoc_basesoc_timer_reload_storage <= 32'd0;
		basesoc_basesoc_timer_reload_re <= 1'd0;
		basesoc_basesoc_timer_en_storage <= 1'd0;
		basesoc_basesoc_timer_en_re <= 1'd0;
		basesoc_basesoc_timer_update_value_storage <= 1'd0;
		basesoc_basesoc_timer_update_value_re <= 1'd0;
		basesoc_basesoc_timer_value_status <= 32'd0;
		basesoc_basesoc_timer_value_re <= 1'd0;
		basesoc_basesoc_timer_zero_pending <= 1'd0;
		basesoc_basesoc_timer_zero_trigger_d <= 1'd0;
		basesoc_basesoc_timer_status_re <= 1'd0;
		basesoc_basesoc_timer_pending_re <= 1'd0;
		basesoc_basesoc_timer_pending_r <= 1'd0;
		basesoc_basesoc_timer_enable_storage <= 1'd0;
		basesoc_basesoc_timer_enable_re <= 1'd0;
		basesoc_basesoc_timer_value <= 32'd0;
		basesoc_leds_storage <= 10'd0;
		basesoc_leds_re <= 1'd0;
		basesoc_switchs_re <= 1'd0;
		basesoc_buttons_re <= 1'd0;
		basesoc_dgt_count <= 3'd0;
		basesoc_dgt_tick <= 1'd0;
		basesoc_dgt_tick_count <= 18'd0;
		basesoc_dig_0_storage <= 8'd0;
		basesoc_dig_0_re <= 1'd0;
		basesoc_dig_1_storage <= 8'd0;
		basesoc_dig_1_re <= 1'd0;
		basesoc_dig_2_storage <= 8'd0;
		basesoc_dig_2_re <= 1'd0;
		basesoc_dig_3_storage <= 8'd0;
		basesoc_dig_3_re <= 1'd0;
		basesoc_dig_4_storage <= 8'd0;
		basesoc_dig_4_re <= 1'd0;
		basesoc_dig_5_storage <= 8'd0;
		basesoc_dig_5_re <= 1'd0;
		basesoc_dig_6_storage <= 8'd0;
		basesoc_dig_6_re <= 1'd0;
		basesoc_dig_7_storage <= 8'd0;
		basesoc_dig_7_re <= 1'd0;
		ledRGB1_r <= 1'd0;
		ledRGB1_g <= 1'd0;
		ledRGB1_b <= 1'd0;
		basesoc_ledRGB_1_r_enable_storage <= 1'd0;
		basesoc_ledRGB_1_r_enable_re <= 1'd0;
		basesoc_ledRGB_1_r_width_re <= 1'd0;
		basesoc_ledRGB_1_r_period_re <= 1'd0;
		basesoc_ledRGB_1_g_enable_storage <= 1'd0;
		basesoc_ledRGB_1_g_enable_re <= 1'd0;
		basesoc_ledRGB_1_g_width_re <= 1'd0;
		basesoc_ledRGB_1_g_period_re <= 1'd0;
		basesoc_ledRGB_1_b_enable_storage <= 1'd0;
		basesoc_ledRGB_1_b_enable_re <= 1'd0;
		basesoc_ledRGB_1_b_width_re <= 1'd0;
		basesoc_ledRGB_1_b_period_re <= 1'd0;
		ledRGB2_r <= 1'd0;
		ledRGB2_g <= 1'd0;
		ledRGB2_b <= 1'd0;
		basesoc_ledRGB_2_r_enable_storage <= 1'd0;
		basesoc_ledRGB_2_r_enable_re <= 1'd0;
		basesoc_ledRGB_2_r_width_re <= 1'd0;
		basesoc_ledRGB_2_r_period_re <= 1'd0;
		basesoc_ledRGB_2_g_enable_storage <= 1'd0;
		basesoc_ledRGB_2_g_enable_re <= 1'd0;
		basesoc_ledRGB_2_g_width_re <= 1'd0;
		basesoc_ledRGB_2_g_period_re <= 1'd0;
		basesoc_ledRGB_2_b_enable_storage <= 1'd0;
		basesoc_ledRGB_2_b_enable_re <= 1'd0;
		basesoc_ledRGB_2_b_width_re <= 1'd0;
		basesoc_ledRGB_2_b_period_re <= 1'd0;
		uart_wifi_tx <= 1'd1;
		basesoc_uart_wifi_phy_tx_tick <= 1'd0;
		basesoc_uart_wifi_phy_rx_tick <= 1'd0;
		basesoc_uart_wifi_phy_rx_rx_d <= 1'd0;
		basesoc_txfull_re <= 1'd0;
		basesoc_rxempty_re <= 1'd0;
		basesoc_tx_pending <= 1'd0;
		basesoc_tx_trigger_d <= 1'd0;
		basesoc_rx_pending <= 1'd0;
		basesoc_rx_trigger_d <= 1'd0;
		basesoc_status_re <= 1'd0;
		basesoc_pending_re <= 1'd0;
		basesoc_pending_r <= 2'd0;
		basesoc_enable_storage <= 2'd0;
		basesoc_enable_re <= 1'd0;
		basesoc_txempty_re <= 1'd0;
		basesoc_rxfull_re <= 1'd0;
		basesoc_tx_fifo_readable <= 1'd0;
		basesoc_tx_fifo_level0 <= 5'd0;
		basesoc_tx_fifo_produce <= 4'd0;
		basesoc_tx_fifo_consume <= 4'd0;
		basesoc_rx_fifo_readable <= 1'd0;
		basesoc_rx_fifo_level0 <= 5'd0;
		basesoc_rx_fifo_produce <= 4'd0;
		basesoc_rx_fifo_consume <= 4'd0;
		basesoc_rst_storage <= 1'd0;
		basesoc_rst_re <= 1'd0;
		basesoc_pos_storage <= 8'd0;
		basesoc_pos_re <= 1'd0;
		basesoc__w_storage <= 3'd0;
		basesoc__w_re <= 1'd0;
		basesoc__r_re <= 1'd0;
		builder_rs232phytx0_state <= 1'd0;
		builder_rs232phyrx0_state <= 1'd0;
		builder_rs232phytx1_state <= 1'd0;
		builder_rs232phyrx1_state <= 1'd0;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 4'd0;
		builder_count <= 20'd1000000;
		builder_state <= 1'd0;
	end
	builder_xilinxmultiregimpl0_regs0 <= serial_rx;
	builder_xilinxmultiregimpl0_regs1 <= builder_xilinxmultiregimpl0_regs0;
	builder_xilinxmultiregimpl1_regs0 <= {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
	builder_xilinxmultiregimpl1_regs1 <= builder_xilinxmultiregimpl1_regs0;
	builder_xilinxmultiregimpl2_regs0 <= {btnl, btnr, btnc};
	builder_xilinxmultiregimpl2_regs1 <= builder_xilinxmultiregimpl2_regs0;
	builder_xilinxmultiregimpl3_regs0 <= uart_wifi_rx;
	builder_xilinxmultiregimpl3_regs1 <= builder_xilinxmultiregimpl3_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 5305-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] mem[0:5304];
initial begin
	$readmemh("mem.init", mem);
end
reg [31:0] mem_dat0;
always @(posedge sys_clk) begin
	mem_dat0 <= mem[basesoc_basesoc_adr];
end
assign basesoc_basesoc_dat_r = mem_dat0;


//------------------------------------------------------------------------------
// Memory mem_1: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_1[0:2047];
initial begin
	$readmemh("mem_1.init", mem_1);
end
reg [10:0] mem_1_adr0;
always @(posedge sys_clk) begin
	if (basesoc_basesoc_sram0_we[0])
		mem_1[basesoc_basesoc_sram0_adr][7:0] <= basesoc_basesoc_sram0_dat_w[7:0];
	if (basesoc_basesoc_sram0_we[1])
		mem_1[basesoc_basesoc_sram0_adr][15:8] <= basesoc_basesoc_sram0_dat_w[15:8];
	if (basesoc_basesoc_sram0_we[2])
		mem_1[basesoc_basesoc_sram0_adr][23:16] <= basesoc_basesoc_sram0_dat_w[23:16];
	if (basesoc_basesoc_sram0_we[3])
		mem_1[basesoc_basesoc_sram0_adr][31:24] <= basesoc_basesoc_sram0_dat_w[31:24];
	mem_1_adr0 <= basesoc_basesoc_sram0_adr;
end
assign basesoc_basesoc_sram0_dat_r = mem_1[mem_1_adr0];


//------------------------------------------------------------------------------
// Memory mem_2: 4096-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_2[0:4095];
initial begin
	$readmemh("mem_2.init", mem_2);
end
reg [11:0] mem_2_adr0;
always @(posedge sys_clk) begin
	if (basesoc_basesoc_sram1_we[0])
		mem_2[basesoc_basesoc_sram1_adr][7:0] <= basesoc_basesoc_sram1_dat_w[7:0];
	if (basesoc_basesoc_sram1_we[1])
		mem_2[basesoc_basesoc_sram1_adr][15:8] <= basesoc_basesoc_sram1_dat_w[15:8];
	if (basesoc_basesoc_sram1_we[2])
		mem_2[basesoc_basesoc_sram1_adr][23:16] <= basesoc_basesoc_sram1_dat_w[23:16];
	if (basesoc_basesoc_sram1_we[3])
		mem_2[basesoc_basesoc_sram1_adr][31:24] <= basesoc_basesoc_sram1_dat_w[31:24];
	mem_2_adr0 <= basesoc_basesoc_sram1_adr;
end
assign basesoc_basesoc_sram1_dat_r = mem_2[mem_2_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (basesoc_basesoc_uart_tx_fifo_wrport_we)
		storage[basesoc_basesoc_uart_tx_fifo_wrport_adr] <= basesoc_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[basesoc_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[basesoc_basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign basesoc_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (basesoc_basesoc_uart_rx_fifo_wrport_we)
		storage_1[basesoc_basesoc_uart_rx_fifo_wrport_adr] <= basesoc_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[basesoc_basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign basesoc_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (basesoc_tx_fifo_wrport_we)
		storage_2[basesoc_tx_fifo_wrport_adr] <= basesoc_tx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_tx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[basesoc_tx_fifo_rdport_adr];
end
assign basesoc_tx_fifo_wrport_dat_r = storage_2_dat0;
assign basesoc_tx_fifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_3[0:15];
reg [9:0] storage_3_dat0;
reg [9:0] storage_3_dat1;
always @(posedge sys_clk) begin
	if (basesoc_rx_fifo_wrport_we)
		storage_3[basesoc_rx_fifo_wrport_adr] <= basesoc_rx_fifo_wrport_dat_w;
	storage_3_dat0 <= storage_3[basesoc_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_rx_fifo_rdport_re)
		storage_3_dat1 <= storage_3[basesoc_rx_fifo_rdport_adr];
end
assign basesoc_rx_fifo_wrport_dat_r = storage_3_dat0;
assign basesoc_rx_fifo_rdport_dat_r = storage_3_dat1;


servo servo(
	.clk(sys_clk),
	.pos(basesoc_pos_storage),
	.rst(basesoc_rst_storage),
	.pwm(pwm)
);

assign basesoc_pads_scl = (~basesoc_scl) ? 1'd0 : 1'bz;

assign basesoc_pads_sda = (basesoc_oe & (~basesoc_sda0)) ? 1'd0 : 1'bz;
assign basesoc_sda1 = basesoc_pads_sda;

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(basesoc_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO(basesoc_basesoc_dbus_dat_r),
	.dBusWishbone_ERR(basesoc_basesoc_dbus_err),
	.externalInterruptArray(basesoc_basesoc_interrupt),
	.externalResetVector(basesoc_basesoc_vexriscv),
	.iBusWishbone_ACK(basesoc_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO(basesoc_basesoc_ibus_dat_r),
	.iBusWishbone_ERR(basesoc_basesoc_ibus_err),
	.reset((sys_rst | basesoc_basesoc_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(basesoc_basesoc_dbus_adr),
	.dBusWishbone_BTE(basesoc_basesoc_dbus_bte),
	.dBusWishbone_CTI(basesoc_basesoc_dbus_cti),
	.dBusWishbone_CYC(basesoc_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI(basesoc_basesoc_dbus_dat_w),
	.dBusWishbone_SEL(basesoc_basesoc_dbus_sel),
	.dBusWishbone_STB(basesoc_basesoc_dbus_stb),
	.dBusWishbone_WE(basesoc_basesoc_dbus_we),
	.iBusWishbone_ADR(basesoc_basesoc_ibus_adr),
	.iBusWishbone_BTE(basesoc_basesoc_ibus_bte),
	.iBusWishbone_CTI(basesoc_basesoc_ibus_cti),
	.iBusWishbone_CYC(basesoc_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI(basesoc_basesoc_ibus_dat_w),
	.iBusWishbone_SEL(basesoc_basesoc_ibus_sel),
	.iBusWishbone_STB(basesoc_basesoc_ibus_stb),
	.iBusWishbone_WE(basesoc_basesoc_ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-06-25 19:17:03.
//------------------------------------------------------------------------------
